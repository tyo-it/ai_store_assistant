(function(M,W){typeof exports=="object"&&typeof module<"u"?W(exports):typeof define=="function"&&define.amd?define(["exports"],W):(M=typeof globalThis<"u"?globalThis:M||self,W(M.OpenAIAgentsRealtime={}))})(this,(function(M){"use strict";var pd=Object.defineProperty;var Wa=M=>{throw TypeError(M)};var fd=(M,W,Q)=>W in M?pd(M,W,{enumerable:!0,configurable:!0,writable:!0,value:Q}):M[W]=Q;var _=(M,W,Q)=>fd(M,typeof W!="symbol"?W+"":W,Q),qr=(M,W,Q)=>W.has(M)||Wa("Cannot "+Q);var o=(M,W,Q)=>(qr(M,W,"read from private field"),Q?Q.call(M):W.get(M)),I=(M,W,Q)=>W.has(M)?Wa("Cannot add the same private member more than once"):W instanceof WeakSet?W.add(M):W.set(M,Q),y=(M,W,Q,Tn)=>(qr(M,W,"write to private field"),Tn?Tn.call(M,Q):W.set(M,Q),Q),L=(M,W,Q)=>(qr(M,W,"access private method"),Q);var Ct,ct,nn,Et,rn,sn,Ot,ue,je,Ge,ze,Rt,le,Jr,Br,Jt,me,an,on,un,cn,dt,Ve,We,lt,dn,Nt,$e,oe,pt,Qn,Ha,ge,ln,He,_e,Fe,Dt,Pt,pn,ft,Mt,ce,Gr,zr,Vr,Ka,Wr,ht,fn,pe,hn,mn,K,gn,mt,_n,gt,_t,se,yn,Le,yt,vt,er,Ya,$,D,$t,P,Ft,Lt,vn,X,Zt,Ut,Re,wn,wt,bn,xn,Y,nr,rr,Xa,sr,Qa,Hr,ei,Kr;const W={version:"0.1.4"};async function Q(n){try{return[null,await n()]}catch(e){return[e,null]}}function Tn(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const ti=Symbol("Let zodToJsonSchema decide on which parser to use"),Yr={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},ni=n=>typeof n=="string"?{...Yr,basePath:["#"],definitions:{},name:n}:{...Yr,basePath:["#"],definitions:{},...n},ar=n=>"_def"in n?n._def:n;function ri(n){if(!n)return!0;for(const e in n)return!1;return!0}const si=n=>{const e=ni(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[ar(s),{def:ar(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Xr(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function H(n,e,t,r,s){n[e]=t,Xr(n,e,r,s)}var B;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(u=>typeof s[s[u]]!="number"),i={};for(const u of a)i[u]=s[u];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(B||(B={}));var Qr;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(Qr||(Qr={}));const k=B.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Ze=n=>{switch(typeof n){case"undefined":return k.undefined;case"string":return k.string;case"number":return Number.isNaN(n)?k.nan:k.number;case"boolean":return k.boolean;case"function":return k.function;case"bigint":return k.bigint;case"symbol":return k.symbol;case"object":return Array.isArray(n)?k.array:n===null?k.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?k.promise:typeof Map<"u"&&n instanceof Map?k.map:typeof Set<"u"&&n instanceof Set?k.set:typeof Date<"u"&&n instanceof Date?k.date:k.object;default:return k.unknown}},x=B.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Ne extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let u=r,p=0;for(;p<i.path.length;){const d=i.path[p];p===i.path.length-1?(u[d]=u[d]||{_errors:[]},u[d]._errors.push(t(i))):u[d]=u[d]||{_errors:[]},u=u[d],p++}}};return s(this),r}static assert(e){if(!(e instanceof Ne))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,B.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Ne.create=n=>new Ne(n);const ir=(n,e)=>{let t;switch(n.code){case x.invalid_type:n.received===k.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case x.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,B.jsonStringifyReplacer)}`;break;case x.unrecognized_keys:t=`Unrecognized key(s) in object: ${B.joinValues(n.keys,", ")}`;break;case x.invalid_union:t="Invalid input";break;case x.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${B.joinValues(n.options)}`;break;case x.invalid_enum_value:t=`Invalid enum value. Expected ${B.joinValues(n.options)}, received '${n.received}'`;break;case x.invalid_arguments:t="Invalid function arguments";break;case x.invalid_return_type:t="Invalid function return type";break;case x.invalid_date:t="Invalid date";break;case x.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:B.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case x.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case x.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case x.custom:t="Invalid input";break;case x.invalid_intersection_types:t="Intersection results could not be merged";break;case x.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case x.not_finite:t="Number must be finite";break;default:t=e.defaultError,B.assertNever(n)}return{message:t}};let ai=ir;function ii(){return ai}const oi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let u="";const p=r.filter(d=>!!d).slice().reverse();for(const d of p)u=d(i,{data:e,defaultError:u}).message;return{...s,path:a,message:u}};function T(n,e){const t=ii(),r=oi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===ir?void 0:ir].filter(s=>!!s)});n.common.issues.push(r)}class de{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return N;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return de.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return N;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const N=Object.freeze({status:"aborted"}),Bt=n=>({status:"dirty",value:n}),ve=n=>({status:"valid",value:n}),es=n=>n.status==="aborted",ts=n=>n.status==="dirty",bt=n=>n.status==="valid",In=n=>typeof Promise<"u"&&n instanceof Promise;var C;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(C||(C={}));class Ie{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const ns=(n,e)=>{if(bt(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Ne(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,u)=>{const{message:p}=n;return i.code==="invalid_enum_value"?{message:p??u.defaultError}:typeof u.data>"u"?{message:p??r??u.defaultError}:i.code!=="invalid_type"?{message:u.defaultError}:{message:p??t??u.defaultError}},description:s}}class Z{get description(){return this._def.description}_getType(e){return Ze(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Ze(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new de,ctx:{common:e.parent.common,data:e.data,parsedType:Ze(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(In(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ze(e)},s=this._parseSync({data:e,path:r.path,parent:r});return ns(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ze(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return bt(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>bt(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Ze(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(In(s)?s:Promise.resolve(s));return ns(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),u=()=>a.addIssue({code:x.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(p=>p?!0:(u(),!1)):i?!0:(u(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new Xe({schema:this,typeName:S.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Me.create(this,this._def)}nullable(){return Qe.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return ke.create(this)}promise(){return Nn.create(this,this._def)}or(e){return An.create([this,e],this._def)}and(e){return Cn.create(this,e,this._def)}transform(e){return new Xe({...j(this._def),schema:this,typeName:S.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new Dn({...j(this._def),innerType:this,defaultValue:t,typeName:S.ZodDefault})}brand(){return new ls({typeName:S.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Pn({...j(this._def),innerType:this,catchValue:t,typeName:S.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return mr.create(this,e)}readonly(){return Mn.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const ui=/^c[^\s-]{8,}$/i,ci=/^[0-9a-z]+$/,di=/^[0-9A-HJKMNP-TV-Z]{26}$/i,li=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,pi=/^[a-z0-9_-]{21}$/i,fi=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,hi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,mi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,gi="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let or;const _i=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,yi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,vi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,wi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,bi=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,xi=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,rs="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",Si=new RegExp(`^${rs}$`);function ss(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function Ti(n){return new RegExp(`^${ss(n)}$`)}function Ii(n){let e=`${rs}T${ss(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function ki(n,e){return!!((e==="v4"||!e)&&_i.test(n)||(e==="v6"||!e)&&vi.test(n))}function Ai(n,e){if(!fi.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function Ci(n,e){return!!((e==="v4"||!e)&&yi.test(n)||(e==="v6"||!e)&&wi.test(n))}class De extends Z{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==k.string){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.string,received:a.parsedType}),N}const r=new de;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,u=e.data.length<a.value;(i||u)&&(s=this._getOrReturnCtx(e,s),i?T(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):u&&T(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")mi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"email",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")or||(or=new RegExp(gi,"u")),or.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"emoji",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")li.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"uuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")pi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"nanoid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")ui.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")ci.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid2",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")di.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ulid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),T(s,{validation:"url",code:x.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"regex",code:x.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?Ii(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?Si.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?Ti(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?hi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"duration",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?ki(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ip",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?Ai(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"jwt",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?Ci(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cidr",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?bi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?xi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64url",code:x.invalid_string,message:a.message}),r.dirty()):B.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:x.invalid_string,...C.errToObj(r)})}_addCheck(e){return new De({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...C.errToObj(e)})}url(e){return this._addCheck({kind:"url",...C.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...C.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...C.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...C.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...C.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...C.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...C.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...C.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...C.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...C.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...C.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...C.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...C.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...C.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...C.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...C.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...C.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...C.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...C.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...C.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...C.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...C.errToObj(t)})}nonempty(e){return this.min(1,C.errToObj(e))}trim(){return new De({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new De({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new De({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}De.create=n=>new De({checks:[],typeName:S.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function Ei(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class xt extends Z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==k.number){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.number,received:a.parsedType}),N}let r;const s=new de;for(const a of this._def.checks)a.kind==="int"?B.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:x.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?Ei(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_finite,message:a.message}),s.dirty()):B.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new xt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new xt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:C.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:C.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:C.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:C.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&B.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}xt.create=n=>new xt({checks:[],typeName:S.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Gt extends Z{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==k.bigint)return this._getInvalidInput(e);let r;const s=new de;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):B.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return T(t,{code:x.invalid_type,expected:k.bigint,received:t.parsedType}),N}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new Gt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new Gt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Gt.create=n=>new Gt({checks:[],typeName:S.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class ur extends Z{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==k.boolean){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.boolean,received:r.parsedType}),N}return ve(e.data)}}ur.create=n=>new ur({typeName:S.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class kn extends Z{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==k.date){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.date,received:a.parsedType}),N}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_date}),N}const r=new de;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):B.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new kn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:C.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:C.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}kn.create=n=>new kn({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:S.ZodDate,...j(n)});class as extends Z{_parse(e){if(this._getType(e)!==k.symbol){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.symbol,received:r.parsedType}),N}return ve(e.data)}}as.create=n=>new as({typeName:S.ZodSymbol,...j(n)});class cr extends Z{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.undefined,received:r.parsedType}),N}return ve(e.data)}}cr.create=n=>new cr({typeName:S.ZodUndefined,...j(n)});class dr extends Z{_parse(e){if(this._getType(e)!==k.null){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.null,received:r.parsedType}),N}return ve(e.data)}}dr.create=n=>new dr({typeName:S.ZodNull,...j(n)});class lr extends Z{constructor(){super(...arguments),this._any=!0}_parse(e){return ve(e.data)}}lr.create=n=>new lr({typeName:S.ZodAny,...j(n)});class is extends Z{constructor(){super(...arguments),this._unknown=!0}_parse(e){return ve(e.data)}}is.create=n=>new is({typeName:S.ZodUnknown,...j(n)});class Ue extends Z{_parse(e){const t=this._getOrReturnCtx(e);return T(t,{code:x.invalid_type,expected:k.never,received:t.parsedType}),N}}Ue.create=n=>new Ue({typeName:S.ZodNever,...j(n)});class os extends Z{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.void,received:r.parsedType}),N}return ve(e.data)}}os.create=n=>new os({typeName:S.ZodVoid,...j(n)});class ke extends Z{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==k.array)return T(t,{code:x.invalid_type,expected:k.array,received:t.parsedType}),N;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,u=t.data.length<s.exactLength.value;(i||u)&&(T(t,{code:i?x.too_big:x.too_small,minimum:u?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(T(t,{code:x.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(T(t,{code:x.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,u)=>s.type._parseAsync(new Ie(t,i,t.path,u)))).then(i=>de.mergeArray(r,i));const a=[...t.data].map((i,u)=>s.type._parseSync(new Ie(t,i,t.path,u)));return de.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new ke({...this._def,minLength:{value:e,message:C.toString(t)}})}max(e,t){return new ke({...this._def,maxLength:{value:e,message:C.toString(t)}})}length(e,t){return new ke({...this._def,exactLength:{value:e,message:C.toString(t)}})}nonempty(e){return this.min(1,e)}}ke.create=(n,e)=>new ke({type:n,minLength:null,maxLength:null,exactLength:null,typeName:S.ZodArray,...j(e)});function St(n){if(n instanceof ee){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Me.create(St(r))}return new ee({...n._def,shape:()=>e})}else return n instanceof ke?new ke({...n._def,type:St(n.element)}):n instanceof Me?Me.create(St(n.unwrap())):n instanceof Qe?Qe.create(St(n.unwrap())):n instanceof Ke?Ke.create(n.items.map(e=>St(e))):n}class ee extends Z{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=B.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==k.object){const d=this._getOrReturnCtx(e);return T(d,{code:x.invalid_type,expected:k.object,received:d.parsedType}),N}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),u=[];if(!(this._def.catchall instanceof Ue&&this._def.unknownKeys==="strip"))for(const d in s.data)i.includes(d)||u.push(d);const p=[];for(const d of i){const l=a[d],f=s.data[d];p.push({key:{status:"valid",value:d},value:l._parse(new Ie(s,f,s.path,d)),alwaysSet:d in s.data})}if(this._def.catchall instanceof Ue){const d=this._def.unknownKeys;if(d==="passthrough")for(const l of u)p.push({key:{status:"valid",value:l},value:{status:"valid",value:s.data[l]}});else if(d==="strict")u.length>0&&(T(s,{code:x.unrecognized_keys,keys:u}),r.dirty());else if(d!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const d=this._def.catchall;for(const l of u){const f=s.data[l];p.push({key:{status:"valid",value:l},value:d._parse(new Ie(s,f,s.path,l)),alwaysSet:l in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const d=[];for(const l of p){const f=await l.key,h=await l.value;d.push({key:f,value:h,alwaysSet:l.alwaysSet})}return d}).then(d=>de.mergeObjectSync(r,d)):de.mergeObjectSync(r,p)}get shape(){return this._def.shape()}strict(e){return C.errToObj,new ee({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:C.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new ee({...this._def,unknownKeys:"strip"})}passthrough(){return new ee({...this._def,unknownKeys:"passthrough"})}extend(e){return new ee({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new ee({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:S.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new ee({...this._def,catchall:e})}pick(e){const t={};for(const r of B.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new ee({...this._def,shape:()=>t})}omit(e){const t={};for(const r of B.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new ee({...this._def,shape:()=>t})}deepPartial(){return St(this)}partial(e){const t={};for(const r of B.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new ee({...this._def,shape:()=>t})}required(e){const t={};for(const r of B.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Me;)a=a._def.innerType;t[r]=a}return new ee({...this._def,shape:()=>t})}keyof(){return cs(B.objectKeys(this.shape))}}ee.create=(n,e)=>new ee({shape:()=>n,unknownKeys:"strip",catchall:Ue.create(),typeName:S.ZodObject,...j(e)}),ee.strictCreate=(n,e)=>new ee({shape:()=>n,unknownKeys:"strict",catchall:Ue.create(),typeName:S.ZodObject,...j(e)}),ee.lazycreate=(n,e)=>new ee({shape:n,unknownKeys:"strip",catchall:Ue.create(),typeName:S.ZodObject,...j(e)});class An extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const u of a)if(u.result.status==="valid")return u.result;for(const u of a)if(u.result.status==="dirty")return t.common.issues.push(...u.ctx.common.issues),u.result;const i=a.map(u=>new Ne(u.ctx.common.issues));return T(t,{code:x.invalid_union,unionErrors:i}),N}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const p of r){const d={...t,common:{...t.common,issues:[]},parent:null},l=p._parseSync({data:t.data,path:t.path,parent:d});if(l.status==="valid")return l;l.status==="dirty"&&!a&&(a={result:l,ctx:d}),d.common.issues.length&&i.push(d.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const u=i.map(p=>new Ne(p));return T(t,{code:x.invalid_union,unionErrors:u}),N}}get options(){return this._def.options}}An.create=(n,e)=>new An({options:n,typeName:S.ZodUnion,...j(e)});const Pe=n=>n instanceof On?Pe(n.schema):n instanceof Xe?Pe(n.innerType()):n instanceof Rn?[n.value]:n instanceof Ye?n.options:n instanceof hr?B.objectValues(n.enum):n instanceof Dn?Pe(n._def.innerType):n instanceof cr?[void 0]:n instanceof dr?[null]:n instanceof Me?[void 0,...Pe(n.unwrap())]:n instanceof Qe?[null,...Pe(n.unwrap())]:n instanceof ls||n instanceof Mn?Pe(n.unwrap()):n instanceof Pn?Pe(n._def.innerType):[];class pr extends Z{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.object)return T(t,{code:x.invalid_type,expected:k.object,received:t.parsedType}),N;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(T(t,{code:x.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),N)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Pe(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const u of i){if(s.has(u))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);s.set(u,a)}}return new pr({typeName:S.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function fr(n,e){const t=Ze(n),r=Ze(e);if(n===e)return{valid:!0,data:n};if(t===k.object&&r===k.object){const s=B.objectKeys(e),a=B.objectKeys(n).filter(u=>s.indexOf(u)!==-1),i={...n,...e};for(const u of a){const p=fr(n[u],e[u]);if(!p.valid)return{valid:!1};i[u]=p.data}return{valid:!0,data:i}}else if(t===k.array&&r===k.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],u=e[a],p=fr(i,u);if(!p.valid)return{valid:!1};s.push(p.data)}return{valid:!0,data:s}}else return t===k.date&&r===k.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class Cn extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(es(a)||es(i))return N;const u=fr(a.value,i.value);return u.valid?((ts(a)||ts(i))&&t.dirty(),{status:t.value,value:u.data}):(T(r,{code:x.invalid_intersection_types}),N)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}Cn.create=(n,e,t)=>new Cn({left:n,right:e,typeName:S.ZodIntersection,...j(t)});class Ke extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.array)return T(r,{code:x.invalid_type,expected:k.array,received:r.parsedType}),N;if(r.data.length<this._def.items.length)return T(r,{code:x.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),N;!this._def.rest&&r.data.length>this._def.items.length&&(T(r,{code:x.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,u)=>{const p=this._def.items[u]||this._def.rest;return p?p._parse(new Ie(r,i,r.path,u)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>de.mergeArray(t,i)):de.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new Ke({...this._def,rest:e})}}Ke.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Ke({items:n,typeName:S.ZodTuple,rest:null,...j(e)})};class En extends Z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.object)return T(r,{code:x.invalid_type,expected:k.object,received:r.parsedType}),N;const s=[],a=this._def.keyType,i=this._def.valueType;for(const u in r.data)s.push({key:a._parse(new Ie(r,u,r.path,u)),value:i._parse(new Ie(r,r.data[u],r.path,u)),alwaysSet:u in r.data});return r.common.async?de.mergeObjectAsync(t,s):de.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof Z?new En({keyType:e,valueType:t,typeName:S.ZodRecord,...j(r)}):new En({keyType:De.create(),valueType:e,typeName:S.ZodRecord,...j(t)})}}class us extends Z{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.map)return T(r,{code:x.invalid_type,expected:k.map,received:r.parsedType}),N;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([u,p],d)=>({key:s._parse(new Ie(r,u,r.path,[d,"key"])),value:a._parse(new Ie(r,p,r.path,[d,"value"]))}));if(r.common.async){const u=new Map;return Promise.resolve().then(async()=>{for(const p of i){const d=await p.key,l=await p.value;if(d.status==="aborted"||l.status==="aborted")return N;(d.status==="dirty"||l.status==="dirty")&&t.dirty(),u.set(d.value,l.value)}return{status:t.value,value:u}})}else{const u=new Map;for(const p of i){const d=p.key,l=p.value;if(d.status==="aborted"||l.status==="aborted")return N;(d.status==="dirty"||l.status==="dirty")&&t.dirty(),u.set(d.value,l.value)}return{status:t.value,value:u}}}}us.create=(n,e,t)=>new us({valueType:e,keyType:n,typeName:S.ZodMap,...j(t)});class zt extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.set)return T(r,{code:x.invalid_type,expected:k.set,received:r.parsedType}),N;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(T(r,{code:x.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(T(r,{code:x.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(p){const d=new Set;for(const l of p){if(l.status==="aborted")return N;l.status==="dirty"&&t.dirty(),d.add(l.value)}return{status:t.value,value:d}}const u=[...r.data.values()].map((p,d)=>a._parse(new Ie(r,p,r.path,d)));return r.common.async?Promise.all(u).then(p=>i(p)):i(u)}min(e,t){return new zt({...this._def,minSize:{value:e,message:C.toString(t)}})}max(e,t){return new zt({...this._def,maxSize:{value:e,message:C.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}zt.create=(n,e)=>new zt({valueType:n,minSize:null,maxSize:null,typeName:S.ZodSet,...j(e)});class On extends Z{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}On.create=(n,e)=>new On({getter:n,typeName:S.ZodLazy,...j(e)});class Rn extends Z{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return T(t,{received:t.data,code:x.invalid_literal,expected:this._def.value}),N}return{status:"valid",value:e.data}}get value(){return this._def.value}}Rn.create=(n,e)=>new Rn({value:n,typeName:S.ZodLiteral,...j(e)});function cs(n,e){return new Ye({values:n,typeName:S.ZodEnum,...j(e)})}class Ye extends Z{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{expected:B.joinValues(r),received:t.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{received:t.data,code:x.invalid_enum_value,options:r}),N}return ve(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Ye.create(e,{...this._def,...t})}exclude(e,t=this._def){return Ye.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}Ye.create=cs;class hr extends Z{_parse(e){const t=B.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==k.string&&r.parsedType!==k.number){const s=B.objectValues(t);return T(r,{expected:B.joinValues(s),received:r.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(B.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=B.objectValues(t);return T(r,{received:r.data,code:x.invalid_enum_value,options:s}),N}return ve(e.data)}get enum(){return this._def.values}}hr.create=(n,e)=>new hr({values:n,typeName:S.ZodNativeEnum,...j(e)});class Nn extends Z{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.promise&&t.common.async===!1)return T(t,{code:x.invalid_type,expected:k.promise,received:t.parsedType}),N;const r=t.parsedType===k.promise?t.data:Promise.resolve(t.data);return ve(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}Nn.create=(n,e)=>new Nn({type:n,typeName:S.ZodPromise,...j(e)});class Xe extends Z{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===S.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{T(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async u=>{if(t.value==="aborted")return N;const p=await this._def.schema._parseAsync({data:u,path:r.path,parent:r});return p.status==="aborted"?N:p.status==="dirty"||t.value==="dirty"?Bt(p.value):p});{if(t.value==="aborted")return N;const u=this._def.schema._parseSync({data:i,path:r.path,parent:r});return u.status==="aborted"?N:u.status==="dirty"||t.value==="dirty"?Bt(u.value):u}}if(s.type==="refinement"){const i=u=>{const p=s.refinement(u,a);if(r.common.async)return Promise.resolve(p);if(p instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return u};if(r.common.async===!1){const u=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value),{status:t.value,value:u.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(u=>u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value).then(()=>({status:t.value,value:u.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!bt(i))return N;const u=s.transform(i.value,a);if(u instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:u}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>bt(i)?Promise.resolve(s.transform(i.value,a)).then(u=>({status:t.value,value:u})):N);B.assertNever(s)}}Xe.create=(n,e,t)=>new Xe({schema:n,typeName:S.ZodEffects,effect:e,...j(t)}),Xe.createWithPreprocess=(n,e,t)=>new Xe({schema:e,effect:{type:"preprocess",transform:n},typeName:S.ZodEffects,...j(t)});class Me extends Z{_parse(e){return this._getType(e)===k.undefined?ve(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Me.create=(n,e)=>new Me({innerType:n,typeName:S.ZodOptional,...j(e)});class Qe extends Z{_parse(e){return this._getType(e)===k.null?ve(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Qe.create=(n,e)=>new Qe({innerType:n,typeName:S.ZodNullable,...j(e)});class Dn extends Z{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===k.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Dn.create=(n,e)=>new Dn({innerType:n,typeName:S.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class Pn extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return In(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Ne(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Ne(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}Pn.create=(n,e)=>new Pn({innerType:n,typeName:S.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class ds extends Z{_parse(e){if(this._getType(e)!==k.nan){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.nan,received:r.parsedType}),N}return{status:"valid",value:e.data}}}ds.create=n=>new ds({typeName:S.ZodNaN,...j(n)});class ls extends Z{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class mr extends Z{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?N:a.status==="dirty"?(t.dirty(),Bt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?N:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new mr({in:e,out:t,typeName:S.ZodPipeline})}}class Mn extends Z{_parse(e){const t=this._def.innerType._parse(e),r=s=>(bt(s)&&(s.value=Object.freeze(s.value)),s);return In(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Mn.create=(n,e)=>new Mn({innerType:n,typeName:S.ZodReadonly,...j(e)});var S;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(S||(S={}));const c=De.create,A=xt.create,et=ur.create,U=lr.create;Ue.create;const G=ke.create,m=ee.create,ps=An.create,fe=pr.create;Cn.create,Ke.create;const te=En.create,Oi=On.create,g=Rn.create,ie=Ye.create;Nn.create,Me.create,Qe.create;function Ri(){return{}}function Ni(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==S.ZodAny&&(t.items=z(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&H(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&H(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(H(t,"minItems",n.exactLength.value,n.exactLength.message,e),H(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function Di(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?H(t,"minimum",r.value,r.message,e):H(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),H(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?H(t,"maximum",r.value,r.message,e):H(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),H(t,"maximum",r.value,r.message,e));break;case"multipleOf":H(t,"multipleOf",r.value,r.message,e);break}return t}function Pi(){return{type:"boolean"}}function Mi(n,e){return z(n.type._def,e)}const ji=(n,e)=>z(n.innerType._def,e);function fs(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>fs(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return $i(n,e)}}const $i=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":H(t,"minimum",r.value,r.message,e);break;case"max":H(t,"maximum",r.value,r.message,e);break}return t};function Fi(n,e){return{...z(n.innerType._def,e),default:n.defaultValue()}}function Li(n,e,t){return e.effectStrategy==="input"?z(n.schema._def,e,t):{}}function Zi(n){return{type:"string",enum:[...n.values]}}const Ui=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function qi(n,e){const t=[z(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),z(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Ui(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:u,...p}=a;i=p}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function Ji(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let gr;const tt={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(gr===void 0&&(gr=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),gr),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function hs(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Bi(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":H(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":H(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Se(t,"email",s.message,e);break;case"format:idn-email":Se(t,"idn-email",s.message,e);break;case"pattern:zod":Te(t,tt.email,s.message,e);break}break;case"url":Se(t,"uri",s.message,e);break;case"uuid":Se(t,"uuid",s.message,e);break;case"regex":Te(t,s.regex,s.message,e);break;case"cuid":Te(t,tt.cuid,s.message,e);break;case"cuid2":Te(t,tt.cuid2,s.message,e);break;case"startsWith":Te(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":Te(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Se(t,"date-time",s.message,e);break;case"date":Se(t,"date",s.message,e);break;case"time":Se(t,"time",s.message,e);break;case"duration":Se(t,"duration",s.message,e);break;case"length":H(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),H(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{Te(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Se(t,"ipv4",s.message,e),s.version!=="v4"&&Se(t,"ipv6",s.message,e);break}case"emoji":Te(t,tt.emoji,s.message,e);break;case"ulid":{Te(t,tt.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Se(t,"binary",s.message,e);break}case"contentEncoding:base64":{H(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{Te(t,tt.base64,s.message,e);break}}break}case"nanoid":Te(t,tt.nanoid,s.message,e)}return t}const Bi=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Se=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):H(n,"format",e,t,r)},Te=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:ms(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):H(n,"pattern",ms(e,r),t,r)},ms=(n,e)=>{var d;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,u=!1,p=!1;for(let l=0;l<s.length;l++){if(i){a+=s[l],i=!1;continue}if(r.i){if(u){if(s[l].match(/[a-z]/)){p?(a+=s[l],a+=`${s[l-2]}-${s[l]}`.toUpperCase(),p=!1):s[l+1]==="-"&&((d=s[l+2])!=null&&d.match(/[a-z]/))?(a+=s[l],p=!0):a+=`${s[l]}${s[l].toUpperCase()}`;continue}}else if(s[l].match(/[a-z]/)){a+=`[${s[l]}${s[l].toUpperCase()}]`;continue}}if(r.m){if(s[l]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[l]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[l]==="."){a+=u?`${s[l]}\r
`:`[${s[l]}\r
]`;continue}a+=s[l],s[l]==="\\"?i=!0:u&&s[l]==="]"?u=!1:!u&&s[l]==="["&&(u=!0)}try{const l=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function gs(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===S.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((u,p)=>({...u,[p]:z(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",p]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:z(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===S.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const u=Object.entries(hs(n.keyType._def,e)).reduce((p,[d,l])=>d==="type"?p:{...p,[d]:l},{});return{...t,propertyNames:u}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===S.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Gi(n,e){if(e.mapStrategy==="record")return gs(n,e);const t=z(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=z(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function zi(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function Vi(){return{not:{}}}function Wi(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const jn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function Hi(n,e){if(e.target==="openApi3")return _s(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in jn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=jn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,u)=>u.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return _s(n,e)}const _s=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>z(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function Ki(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:jn[n.innerType._def.typeName],nullable:!0}:{type:[jn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=z(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=z(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function Yi(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Xr(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?H(t,"minimum",r.value,r.message,e):H(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),H(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?H(t,"maximum",r.value,r.message,e):H(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),H(t,"maximum",r.value,r.message,e));break;case"multipleOf":H(t,"multipleOf",r.value,r.message,e);break}return t}function Xi(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":z(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":z(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function Qi(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var p;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],u=z(a._def,{...e,currentPath:i,propertyPath:i});if(u===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((p=a._def)==null?void 0:p.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:u},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:Xi(n,e)};return t.required.length||delete t.required,t}const eo=(n,e)=>{if(e.propertyPath&&e.currentPath.slice(0,e.propertyPath.length).toString()===e.propertyPath.toString())return z(n.innerType._def,{...e,currentPath:e.currentPath});const t=z(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},to=(n,e)=>{if(e.pipeStrategy==="input")return z(n.in._def,e);if(e.pipeStrategy==="output")return z(n.out._def,e);const t=z(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=z(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function no(n,e){return z(n.type._def,e)}function ro(n,e){const r={type:"array",uniqueItems:!0,items:z(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&H(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&H(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function so(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>z(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:z(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>z(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function ao(){return{not:{}}}function io(){return{}}const oo=(n,e)=>z(n.innerType._def,e);function z(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const u=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(u!==ti)return u}if(r&&!t){const u=uo(r,e);if(u!==void 0)return"$ref"in u&&e.seenRefs.add(u.$ref),u}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=lo(n,n.typeName,e,t);return a&&po(n,e,a),s.jsonSchema=a,a}const uo=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:co(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},co=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},lo=(n,e,t,r)=>{switch(e){case S.ZodString:return hs(n,t);case S.ZodNumber:return Yi(n,t);case S.ZodObject:return Qi(n,t);case S.ZodBigInt:return Di(n,t);case S.ZodBoolean:return Pi();case S.ZodDate:return fs(n,t);case S.ZodUndefined:return ao();case S.ZodNull:return Wi(t);case S.ZodArray:return Ni(n,t);case S.ZodUnion:case S.ZodDiscriminatedUnion:return Hi(n,t);case S.ZodIntersection:return qi(n,t);case S.ZodTuple:return so(n,t);case S.ZodRecord:return gs(n,t);case S.ZodLiteral:return Ji(n,t);case S.ZodEnum:return Zi(n);case S.ZodNativeEnum:return zi(n);case S.ZodNullable:return Ki(n,t);case S.ZodOptional:return eo(n,t);case S.ZodMap:return Gi(n,t);case S.ZodSet:return ro(n,t);case S.ZodLazy:return z(n.getter()._def,t);case S.ZodPromise:return no(n,t);case S.ZodNaN:case S.ZodNever:return Vi();case S.ZodEffects:return Li(n,t,r);case S.ZodAny:return Ri();case S.ZodUnknown:return io();case S.ZodDefault:return Fi(n,t);case S.ZodBranded:return Mi(n,t);case S.ZodReadonly:return oo(n,t);case S.ZodCatch:return ji(n,t);case S.ZodPipeline:return to(n,t);case S.ZodFunction:case S.ZodVoid:case S.ZodSymbol:return;default:return(s=>{})()}},po=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),fo=(n,e)=>{const t=si(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=z(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(ri(t.definitions))return;const p={},d=new Set;for(let l=0;l<500;l++){const f=Object.entries(t.definitions).filter(([h])=>!d.has(h));if(f.length===0)break;for(const[h,v]of f)p[h]=z(ar(v),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},d.add(h)}return p})(),u=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?u.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(u.$schema="https://json-schema.org/draft/2019-09/schema#"),u};function ho(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function ys(n,e){return fo(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function mo(n,e,t){return Tn({type:"json_schema",...t,name:e,strict:!0,schema:ys(n,{name:e})},r=>n.parse(JSON.parse(r)))}function go(n){return ho({type:"function",name:n.name,parameters:ys(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class qe extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class _o extends qe{}class vs extends qe{}class he extends qe{}class ne extends qe{}class ws extends qe{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class yo extends qe{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class bs extends qe{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class $n extends qe{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function nt(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function vo(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function Fn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function _r(n,e){const t=r=>JSON.parse(r);if(nt(n)){const r=go({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new ne("Input type is not a ZodObject or a valid JSON schema")}function xs(n){if(n==="text")return"text";if(nt(n)){const e=mo(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function wo(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Ln={exports:{}},yr,Ss;function bo(){if(Ss)return yr;Ss=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;yr=function(l,f){f=f||{};var h=typeof l;if(h==="string"&&l.length>0)return i(l);if(h==="number"&&isFinite(l))return f.long?p(l):u(l);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(l))};function i(l){if(l=String(l),!(l.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(l);if(f){var h=parseFloat(f[1]),v=(f[2]||"ms").toLowerCase();switch(v){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function u(l){var f=Math.abs(l);return f>=r?Math.round(l/r)+"d":f>=t?Math.round(l/t)+"h":f>=e?Math.round(l/e)+"m":f>=n?Math.round(l/n)+"s":l+"ms"}function p(l){var f=Math.abs(l);return f>=r?d(l,f,r,"day"):f>=t?d(l,f,t,"hour"):f>=e?d(l,f,e,"minute"):f>=n?d(l,f,n,"second"):l+" ms"}function d(l,f,h,v){var w=f>=h*1.5;return Math.round(l/h)+" "+v+(w?"s":"")}return yr}var vr,Ts;function xo(){if(Ts)return vr;Ts=1;function n(e){r.debug=r,r.default=r,r.coerce=d,r.disable=u,r.enable=a,r.enabled=p,r.humanize=bo(),r.destroy=l,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let v=0;v<f.length;v++)h=(h<<5)-h+f.charCodeAt(v),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,v=null,w,b;function O(...R){if(!O.enabled)return;const F=O,V=Number(new Date),q=V-(h||V);F.diff=q,F.prev=h,F.curr=V,h=V,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let J=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(ye,qt)=>{if(ye==="%%")return"%";J++;const Sn=r.formatters[qt];if(typeof Sn=="function"){const tr=R[J];ye=Sn.call(F,tr),R.splice(J,1),J--}return ye}),r.formatArgs.call(F,R),(F.log||r.log).apply(F,R)}return O.namespace=f,O.useColors=r.useColors(),O.color=r.selectColor(f),O.extend=s,O.destroy=r.destroy,Object.defineProperty(O,"enabled",{enumerable:!0,configurable:!1,get:()=>v!==null?v:(w!==r.namespaces&&(w=r.namespaces,b=r.enabled(f)),b),set:R=>{v=R}}),typeof r.init=="function"&&r.init(O),O}function s(f,h){const v=r(this.namespace+(typeof h>"u"?":":h)+f);return v.log=this.log,v}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const v of h)v[0]==="-"?r.skips.push(v.slice(1)):r.names.push(v)}function i(f,h){let v=0,w=0,b=-1,O=0;for(;v<f.length;)if(w<h.length&&(h[w]===f[v]||h[w]==="*"))h[w]==="*"?(b=w,O=v,w++):(v++,w++);else if(b!==-1)w=b+1,O++,v=O;else return!1;for(;w<h.length&&h[w]==="*";)w++;return w===h.length}function u(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function p(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function d(f){return f instanceof Error?f.stack||f.message:f}function l(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return vr=n,vr}var Is;function So(){return Is||(Is=1,(function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let p=!1;return()=>{p||(p=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let p;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(p=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(p[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(p){if(p[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+p[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const d="color: "+this.color;p.splice(1,0,d,"color: inherit");let l=0,f=0;p[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(l++,h==="%c"&&(f=l))}),p.splice(f,0,d)}e.log=console.debug||console.log||(()=>{});function s(p){try{p?e.storage.setItem("debug",p):e.storage.removeItem("debug")}catch{}}function a(){let p;try{p=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!p&&typeof process<"u"&&"env"in process&&(p=process.env.DEBUG),p}function i(){try{return localStorage}catch{}}n.exports=xo()(e);const{formatters:u}=n.exports;u.j=function(p){try{return JSON.stringify(p)}catch(d){return"[UnexpectedJSONParseError]: "+d.message}}})(Ln,Ln.exports)),Ln.exports}var To=So();const Io=wo(To);function ks(){return No()}function As(n){const e=ks();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const Cs={get disabled(){return!0}},Es={get dontLogModelData(){return As("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return As("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},ko=Es.dontLogModelData,Ao=Es.dontLogToolData;function Os(n="openai-agents"){return{namespace:n,debug:Io(n),error:console.error,warn:console.warn,dontLogModelData:ko,dontLogToolData:Ao}}const E=Os("openai-agents:core");function Je(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Co(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function Zn(n){const e=n.name?Fn(n.name):Fn(n.execute.name),t=typeof n.errorFunction>"u"?Co:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&nt(n.parameters))throw new ne("Strict mode is required for Zod parameters");const{parser:s,schema:a}=_r(n.parameters,e);async function i(d,l,f){const[h,v]=await Q(()=>s(l));if(h!==null)throw E.dontLogToolData?E.debug(`Invalid JSON input for tool ${e}`):E.debug(`Invalid JSON input for tool ${e}: ${l}`),new he("Invalid JSON input for tool");E.dontLogToolData?E.debug(`Invoking tool ${e}`):E.debug(`Invoking tool ${e} with input ${l}`);const w=await n.execute(v,d,f),b=Je(w);return E.dontLogToolData?E.debug(`Tool ${e} completed`):E.debug(`Tool ${e} returned: ${b}`),w}async function u(d,l,f){return i(d,l,f).catch(h=>{if(t){const v=Wt();return v==null||v.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:h.toString()}}),t(d,h)}throw h})}const p=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:u,needsApproval:p}}m({name:c(),description:c().optional(),inputSchema:m({type:g("object"),properties:te(c(),U()),required:G(c()),additionalProperties:et()})});const wr={};async function Eo({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&wr[n.name]?wr[n.name].map(s=>Rs(s,n,e)):tu(async s=>{const a=await n.listTools();let i=a;if(t&&r){const p={runContext:t,agent:r,serverName:n.name},d=[];for(const l of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(p,l)){E.debug(`MCP Tool (server: ${n.name}, tool: ${l.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],v=f.blockedToolNames??[];if(h.length>0||v.length>0){const w=h.length>0?h.includes(l.name):!0,b=v.length>0?v.includes(l.name):!1;if(!w||b){b?E.debug(`MCP Tool (server: ${n.name}, tool: ${l.name}) is blocked by the static filter.`):w||E.debug(`MCP Tool (server: ${n.name}, tool: ${l.name}) is not allowed by the static filter.`);continue}}}d.push(l)}i=d}s.spanData.result=i.map(p=>p.name);const u=i.map(p=>Rs(p,n,e));return n.cacheToolsList&&(wr[n.name]=i),u},{data:{server:n.name}})}async function Oo(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:u,agent:p}=s,d=[],l=new Set;for(const f of a){const h=await Eo({server:f,convertSchemasToStrict:i,runContext:u,agent:p}),w=[...new Set(h.map(b=>b.name))].filter(b=>l.has(b));if(w.length>0)throw new ne(`Duplicate tool names found across MCP servers: ${w.join(", ")}`);for(const b of h)l.add(b.name),d.push(b)}return d}function Rs(n,e,t){var i,u,p,d;async function r(l,f){let h={};typeof l=="string"&&l?h=JSON.parse(l):typeof l=="object"&&l!=null&&(h=l);const v=Wt();v&&(v.spanData.mcp_data={server:e.name});const w=await e.callTool(n.name,h);return w.length===1?w[0]:w}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((u=n.inputSchema)==null?void 0:u.properties)??{},required:((p=n.inputSchema)==null?void 0:p.required)??[],additionalProperties:((d=n.inputSchema)==null?void 0:d.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const l=Ro(s);return Zn({name:n.name,description:n.description||"",parameters:l,strict:!0,execute:r})}catch(l){E.warn(`Error converting MCP schema to strict mode: ${l}`)}const a={...s,additionalProperties:!0};return Zn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function Ro(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function No(){return{}}class Un{constructor(){I(this,Ct,new EventTarget);I(this,ct,new Map)}on(e,t){const r=e;let s=o(this,ct).get(r);s||(s=new Map,o(this,ct).set(r,s));let a=s.get(t);a||(a=new Set,s.set(t,a));const i=(u=>t(...u.detail??[]));return a.add(i),o(this,Ct).addEventListener(r,i),this}off(e,t){const r=e,s=o(this,ct).get(r),a=s==null?void 0:s.get(t);if(a!=null&&a.size){for(const i of a)o(this,Ct).removeEventListener(r,i);s==null||s.delete(t),(s==null?void 0:s.size)===0&&o(this,ct).delete(r)}return this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return o(this,Ct).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}Ct=new WeakMap,ct=new WeakMap;const Ns=crypto.randomUUID.bind(crypto),Do=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},Po=globalThis.ReadableStream,Mo=globalThis.TransformStream;class jo{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class $o{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const Fo=new $o;let Ds;function Ae(){return Ds??(Ds=new jo),Ds}function Vt(){const n=Ae().getStore();return n!=null&&n.trace?n.trace:null}function Wt(){const n=Ae().getStore();return n!=null&&n.span?n.span:null}function Ps(n){return async()=>{const e=Vt();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function Lo(n,e,t={}){const r=typeof n=="string"?Ce().createTrace({...t,name:n}):n;return Ae().run({trace:r},Ps(e))}async function Zo(n,e={}){if(Vt())return await n();const r=Ce().createTrace(e);return Ae().run({trace:r},Ps(n))}function qn(n){const e=Ae().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Ae().enterWith(e)}function Ht(){var e;const n=Ae().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Ae().enterWith(n))}function Tt(n){const e=Wt();e&&e.setError(n)}function Uo(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function br(n){const e=Ae().getStore();if(!e)throw new Error("No existing trace found");const t=Uo(e);return Ae().run(t,n)}class qo{async export(e){if(Cs.disabled){E.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId?` groupId=${t.groupId}`:""}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class Jo{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){I(this,le);I(this,nn);I(this,Et);I(this,rn);I(this,sn);I(this,Ot);I(this,ue,[]);I(this,je);I(this,Ge,null);I(this,ze,!1);I(this,Rt,null);y(this,nn,t),y(this,Et,r),y(this,rn,s),y(this,sn,t*a),y(this,Ot,e),y(this,je,Fo),E.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,Rt,new AbortController),L(this,le,Br).call(this)}async onTraceStart(e){await L(this,le,Jr).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await L(this,le,Jr).call(this,e)}async shutdown(e){var t;for(e&&o(this,je).setTimeout(()=>{var r;(r=o(this,Rt))==null||r.abort()},e),E.debug("Shutting down gracefully");o(this,ue).length>0;){if(E.debug(`Waiting for buffer to empty. Items left: ${o(this,ue).length}`),o(this,ze)||await L(this,le,Jt).call(this,!0),(t=o(this,Rt))!=null&&t.signal.aborted){E.debug("Timeout reached, force flushing"),await L(this,le,Jt).call(this,!0);break}await new Promise(r=>o(this,je).setTimeout(r,500))}E.debug("Buffer empty. Exiting"),o(this,je)&&o(this,Ge)&&o(this,je).clearTimeout(o(this,Ge))}async forceFlush(){o(this,ue).length>0&&await L(this,le,Jt).call(this,!0)}}nn=new WeakMap,Et=new WeakMap,rn=new WeakMap,sn=new WeakMap,Ot=new WeakMap,ue=new WeakMap,je=new WeakMap,Ge=new WeakMap,ze=new WeakMap,Rt=new WeakMap,le=new WeakSet,Jr=async function(e){if(o(this,ue).length+1>o(this,nn)){E.error("Dropping trace because buffer is full");return}o(this,ue).push(e),o(this,ue).length>o(this,sn)&&await L(this,le,Jt).call(this)},Br=function(){y(this,Ge,o(this,je).setTimeout(async()=>{await L(this,le,Jt).call(this),L(this,le,Br).call(this)},o(this,rn))),typeof o(this,Ge).unref=="function"&&o(this,Ge).unref()},Jt=async function(e=!1){if(o(this,ue).length!==0){if(E.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this,ue).length}`),e||o(this,ue).length<o(this,Et)){const t=[...o(this,ue)];y(this,ue,[]),y(this,ze,!0),await o(this,Ot).export(t),y(this,ze,!1)}else if(o(this,ue).length>0){const t=o(this,ue).splice(0,o(this,Et));y(this,ze,!0),await o(this,Ot).export(t),y(this,ze,!1)}}};class Bo{constructor(){I(this,me,[])}start(){for(const e of o(this,me))e.start&&e.start()}addTraceProcessor(e){o(this,me).push(e)}setProcessors(e){E.debug("Shutting down old processors");for(const t of o(this,me))t.shutdown();y(this,me,e)}async onTraceStart(e){for(const t of o(this,me))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of o(this,me))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of o(this,me))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of o(this,me))await t.onSpanEnd(e)}async shutdown(e){for(const t of o(this,me))await t.shutdown(e)}async forceFlush(){for(const e of o(this,me))await e.forceFlush()}}me=new WeakMap;let xr=null,Sr=null;function Go(){return xr||(xr=new qo),xr}function Ms(){return Sr||(Sr=new Jo(Go())),Sr}function js(){return new Date().toISOString()}function $s(){return`trace_${Ns().replace(/-/g,"")}`}function zo(){return`span_${Ns().replace(/-/g,"").slice(0,24)}`}function Vo(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const Lr=class Lr{constructor(e,t){_(this,"type","trace.span");I(this,an);I(this,on);I(this,un);I(this,cn);I(this,dt);I(this,Ve);I(this,We);I(this,lt);I(this,dn);y(this,on,e.traceId),y(this,un,e.spanId??zo()),y(this,an,e.data),y(this,dt,t),y(this,cn,e.parentId??null),y(this,lt,e.error??null),y(this,Ve,e.startedAt??null),y(this,We,e.endedAt??null)}get traceId(){return o(this,on)}get spanData(){return o(this,an)}get spanId(){return o(this,un)}get parentId(){return o(this,cn)}get previousSpan(){return o(this,dn)}set previousSpan(e){y(this,dn,e)}start(){if(o(this,Ve)){E.warn("Span already started");return}y(this,Ve,js()),o(this,dt).onSpanStart(this)}end(){if(o(this,We)){E.debug("Span already finished",this.spanData);return}y(this,We,js()),o(this,dt).onSpanEnd(this)}setError(e){y(this,lt,e)}get error(){return o(this,lt)}get startedAt(){return o(this,Ve)}get endedAt(){return o(this,We)}clone(){var t;const e=new Lr({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:o(this,Ve)??void 0,endedAt:o(this,We)??void 0,error:o(this,lt)??void 0},o(this,dt));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Vo(this.spanData),error:this.error}}};an=new WeakMap,on=new WeakMap,un=new WeakMap,cn=new WeakMap,dt=new WeakMap,Ve=new WeakMap,We=new WeakMap,lt=new WeakMap,dn=new WeakMap;let Kt=Lr;class Be extends Kt{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Zr=class Zr{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");I(this,Nt);I(this,$e);this.traceId=e.traceId??$s(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,Nt,t??Ms()),y(this,$e,e.started??!1)}async start(){o(this,$e)||(y(this,$e,!0),await o(this,Nt).onTraceStart(this))}async end(){o(this,$e)&&(y(this,$e,!1),await o(this,Nt).onTraceEnd(this))}clone(){return new Zr({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:o(this,$e)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Nt=new WeakMap,$e=new WeakMap;let Yt=Zr;class Tr extends Yt{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Wo{constructor(){I(this,Qn);I(this,oe);I(this,pt);y(this,oe,new Bo),y(this,pt,Cs.disabled),L(this,Qn,Ha).call(this)}registerProcessor(e){o(this,oe).addTraceProcessor(e)}setProcessors(e){o(this,oe).setProcessors(e)}getCurrentTrace(){return Vt()}getCurrentSpan(){return Wt()}setDisabled(e){y(this,pt,e)}startExportLoop(){o(this,oe).start()}createTrace(e){if(o(this,pt))return E.debug("Tracing is disabled, Not creating trace %o",e),new Tr;const t=e.traceId??$s(),r=e.name??"Agent workflow";return E.debug("Creating trace %s with name %s",t,r),new Yt({...e,name:r,traceId:t},o(this,oe))}createSpan(e,t){if(o(this,pt)||e.disabled)return E.debug("Tracing is disabled, Not creating span %o",e),new Be(e.data,o(this,oe));let r,s;if(t){if(t instanceof Yt){if(t instanceof Tr)return E.debug("Parent trace is no-op, returning NoopSpan"),new Be(e.data,o(this,oe));s=t.traceId}else if(t instanceof Kt){if(t instanceof Be)return E.debug("Parent span is no-op, returning NoopSpan"),new Be(e.data,o(this,oe));r=t.spanId,s=t.traceId}}else{const a=Vt(),i=Wt();if(!a)return E.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Be(e.data,o(this,oe));if(i instanceof Be||a instanceof Tr)return E.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Be(e.data,o(this,oe));s=a.traceId,i?(E.debug("Using parent span %s",i.spanId),r=i.spanId):E.debug("No parent span, using current trace %s",a.traceId)}return s?(E.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new Kt({...e,traceId:s,parentId:r},o(this,oe))):(E.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Be(e.data,o(this,oe)))}async shutdown(e){try{E.debug("Shutting down tracing provider"),await o(this,oe).shutdown(e)}catch(t){E.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await o(this,oe).forceFlush()}}oe=new WeakMap,pt=new WeakMap,Qn=new WeakSet,Ha=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Fs("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Fs("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{E.error("Unhandled rejection",t,r),await e(),Ho("unhandledRejection")||process.exit(1)})}};function Fs(n){return process.listeners(n).length>1}function Ho(n){return process.listeners(n).length>1}let Ir;function Ce(){return Ir||(Ir=new Wo),Ir}function Jn(n){return async(e,...t)=>br(async()=>{const r=n(...t);qn(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),Ht()}})}function Ls(n,e){var t;return Ce().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Ko(n,e){var t,r;return Ce().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Zs=Jn(Ko);function Yo(n,e){return Ce().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const Xo=Jn(Yo);function Qo(n,e){return Ce().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Us=Jn(Qo);function eu(n,e){return Ce().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const tu=Jn(eu);function nu(n){Ce().registerProcessor(n)}class kr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class ru extends kr{constructor(){super(...arguments);_(this,"eventEmitter",new Un)}}class su extends kr{constructor(){super(...arguments);_(this,"eventEmitter",new Un)}}const au="OPENAI_DEFAULT_MODEL";function Bn(n){return n.startsWith("gpt-5-chat")?!1:n.startsWith("gpt-5")}function qs(){return Bn(Js())}function Js(){var e;return((e=ks()[au])==null?void 0:e.toLowerCase())??"gpt-4.1"}function iu(n){const e=Js();return Bn(e)?{providerData:{reasoning:{effort:"low"},text:{verbosity:"low"}}}:{}}function Bs({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function Ar({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function Gs(n){return JSON.stringify({assistant:n.name})}function ou(n){return`transfer_to_${Fn(n.name)}`}function uu(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class zs{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=ou(e),this.toolDescription=uu(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Vs(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new ne("You must provide either both `onHandoff` and `inputType` or neither.");async function i(p,d){var l;if(t){if(!d)throw Tt({message:`Handoff function expected non empty input but got: ${d}`,data:{details:"input is empty"}}),new he("Handoff function expected non empty input");try{const f=await t(d);e.onHandoff&&await e.onHandoff(p,f)}catch(f){throw Tt({message:"Invalid JSON provided",data:{}}),E.dontLogToolData||E.error(`Invalid JSON when parsing: ${d}. Error: ${f}`),new he("Invalid JSON provided")}}else await((l=e.onHandoff)==null?void 0:l.call(e,p));return n}const u=new zs(n,i);if(e.inputType){const p=_r(e.inputType,u.toolName);u.inputJsonSchema=p.schema,u.strictJsonSchema=!0,t=p.parser}return e.toolNameOverride&&(u.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(u.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(u.inputFilter=e.inputFilter),u}function Gn(n){return n instanceof zs?n:Vs(n)}function cu(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const re=m({providerData:te(c(),U()).optional()}),rt=re.extend({id:c().optional()}),du=re.extend({type:g("refusal"),refusal:c()}),lu=re.extend({type:g("output_text"),text:c()}),Ws=re.extend({type:g("input_text"),text:c()}),pu=re.extend({type:g("reasoning_text"),text:c()}),fu=re.extend({type:g("input_image"),image:c().or(m({id:c()})).describe("Could be a URL, base64 or an object with a file ID.")}),hu=re.extend({type:g("input_file"),file:c().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({id:c().describe("OpenAI file ID")})).or(m({url:c().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),Hs=re.extend({type:g("audio"),audio:c().or(m({id:c()})).describe("Base64 encoded audio data or file id"),format:c().nullable().optional(),transcript:c().nullable().optional()}),mu=re.extend({type:g("image"),image:c().describe("Base64 encoded image data")}),gu=re.extend({type:g("text"),text:c()}),_u=re.extend({type:g("image"),data:c().describe("Base64 encoded image data"),mediaType:c().describe("IANA media type of the image")}),yu=re.extend({type:g("computer_screenshot"),data:c().describe("Base64 encoded image data or URL")}),vu=fe("type",[m({type:g("screenshot")}),m({type:g("click"),x:A(),y:A(),button:ie(["left","right","wheel","back","forward"])}),m({type:g("double_click"),x:A(),y:A()}),m({type:g("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),m({type:g("type"),text:c()}),m({type:g("wait")}),m({type:g("move"),x:A(),y:A()}),m({type:g("keypress"),keys:G(c())}),m({type:g("drag"),path:G(m({x:A(),y:A()}))})]),wu=fe("type",[lu,du,Hs,mu]),Cr=rt.extend({type:g("message").optional()}),zn=Cr.extend({role:g("assistant"),status:ie(["in_progress","completed","incomplete"]),content:G(wu)}),bu=fe("type",[Ws,fu,hu,Hs]),Ks=Cr.extend({role:g("user"),content:G(bu).or(c())}),Ys=Cr.extend({role:g("system"),content:c()});fe("role",[Ys,zn,Ks]);const Xt=rt.extend({type:g("hosted_tool_call"),name:c().describe("The name of the hosted tool"),arguments:c().describe("The arguments of the hosted tool call").optional(),status:c().optional(),output:c().optional()}),Qt=rt.extend({type:g("function_call"),callId:c().describe("The ID of the tool call"),name:c().describe("The name of the function"),status:ie(["in_progress","completed","incomplete"]).optional(),arguments:c()}),Er=rt.extend({type:g("function_call_result"),name:c().describe("The name of the tool"),callId:c().describe("The ID of the tool call"),status:ie(["in_progress","completed","incomplete"]),output:fe("type",[gu,_u])}),Or=rt.extend({type:g("computer_call"),callId:c().describe("The ID of the computer call"),status:ie(["in_progress","completed","incomplete"]),action:vu}),xu=rt.extend({type:g("computer_call_result"),callId:c().describe("The ID of the computer call"),output:yu}),Su=fe("type",[Or,Qt,Xt]),Rr=re.extend({id:c().optional(),type:g("reasoning"),content:G(Ws),rawContent:G(pu).optional()}),Xs=rt.extend({type:g("unknown")}),Nr=fe("type",[zn,Xt,Qt,Or,Rr,Xs]),Tu=ps([Ks,zn,Ys,Xt,Qt,Or,Er,xu,Rr,Xs]),Iu=m({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:te(c(),A()).optional(),outputTokensDetails:te(c(),A()).optional()}),Qs=re.extend({type:g("output_text_delta"),delta:c()}),ku=re.extend({type:g("response_started")}),ea=re.extend({type:g("response_done"),response:re.extend({id:c(),usage:Iu,output:G(Nr)})}),Au=re.extend({type:g("model"),event:U().describe("The event from the model")});fe("type",[Qs,ea,ku,Au]);class Vn{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class It{constructor(e={}){_(this,"context");_(this,"usage");I(this,ge);this.context=e,this.usage=new Vn,y(this,ge,new Map)}_rebuildApprovals(e){y(this,ge,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=o(this,ge).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return E.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return E.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!0,rejected:[]});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}o(this,ge).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!1,rejected:!0});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}o(this,ge).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(o(this,ge).entries())}}}ge=new WeakMap;class ta{constructor(e){_(this,"state");this.state=e}get history(){return en(this.input,this.newItems)}get output(){return en([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);E.warn("Accessed finalOutput before agent run is completed.")}}class Dr extends ta{constructor(e){super(e)}}class Cu extends ta{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");I(this,ln,null);I(this,He);I(this,_e);I(this,Fe);I(this,Dt);I(this,Pt);I(this,pn);I(this,ft,!1);if(y(this,He,t.signal),y(this,Fe,new Po({start:r=>{y(this,_e,r)},cancel:()=>{y(this,ft,!0)}})),y(this,Dt,new Promise((r,s)=>{y(this,Pt,r),y(this,pn,s)})),o(this,He)){const r=()=>{var a,i;if(o(this,ft))return;y(this,ft,!0);const s=o(this,_e);if(y(this,_e,void 0),o(this,Fe).locked){if(s)try{s.close()}catch(u){E.debug(`Failed to close readable stream on abort: ${u}`)}}else o(this,Fe).cancel((a=o(this,He))==null?void 0:a.reason).catch(u=>{E.debug(`Failed to cancel readable stream on abort: ${u}`)});(i=o(this,Pt))==null||i.call(this)};o(this,He).aborted?r():o(this,He).addEventListener("abort",r,{once:!0})}}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=o(this,_e))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&o(this,_e)&&(o(this,_e).close(),y(this,_e,void 0),(t=o(this,Pt))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&o(this,_e)&&(o(this,_e).error(t),y(this,_e,void 0)),y(this,ln,t),(r=o(this,pn))==null||r.call(this,t),o(this,Dt).catch(s=>{E.debug(`Resulted in an error: ${s}`)})}get cancelled(){return o(this,ft)}toStream(){return o(this,Fe)}get completed(){return o(this,Dt)}get error(){return o(this,ln)}toTextStream(t={}){const r=o(this,Fe).pipeThrough(new Mo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Qs.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?Do.fromWeb(r):r}[Symbol.asyncIterator](){return o(this,Fe)[Symbol.asyncIterator]()}}ln=new WeakMap,He=new WeakMap,_e=new WeakMap,Fe=new WeakMap,Dt=new WeakMap,Pt=new WeakMap,pn=new WeakMap,ft=new WeakMap;function na(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function ra(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class st{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Wn extends st{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class at extends st{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class kt extends st{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:Je(this.output)}}}class Pr extends st{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Mr extends st{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class jr extends st{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class we extends st{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function sa(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function Eu(n){return n.output.length===0?"":sa(n.output[n.output.length-1])||""}class Ou{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class Ru{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class Nu{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function aa(n,e,t,r){var w;const s=[],a=[],i=[],u=[],p=[],d=[],l=new Map(r.map(b=>[b.toolName,b])),f=new Map(t.filter(b=>b.type==="function").map(b=>[b.name,b])),h=t.find(b=>b.type==="computer"),v=new Map(t.filter(b=>{var O;return b.type==="hosted_tool"&&((O=b.providerData)==null?void 0:O.type)==="mcp"}).map(b=>b).map(b=>[b.providerData.server_label,b]));for(const b of n.output){if(b.type==="message")b.role==="assistant"&&s.push(new Wn(b,e));else if(b.type==="hosted_tool_call"){s.push(new at(b,e));const R=b.name;if(d.push(R),((w=b.providerData)==null?void 0:w.type)==="mcp_approval_request"||b.name==="mcp_approval_request"){const F=b.providerData,V=F.server_label,q=v.get(V);if(typeof q>"u"){const ae=`MCP server (${V}) not found in Agent (${e.name})`;throw Tt({message:ae,data:{mcp_server_label:V}}),new he(ae)}const J=new we({type:"hosted_tool_call",name:F.name,id:F.id,status:"in_progress",providerData:F},e);p.push({requestItem:J,mcpTool:q}),q.providerData.on_approval||s.push(J)}}else if(b.type==="reasoning")s.push(new Pr(b,e));else if(b.type==="computer_call"){if(s.push(new at(b,e)),d.push("computer_use"),!h)throw Tt({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new he("Model produced computer action without a computer tool.");u.push({toolCall:b,computer:h})}if(b.type!=="function_call")continue;d.push(b.name);const O=l.get(b.name);if(O)s.push(new Mr(b,e)),a.push({toolCall:b,handoff:O});else{const R=f.get(b.name);if(!R)throw Tt({message:`Tool ${b.name} not found in agent ${e.name}.`,data:{tool_name:b.name,agent_name:e.name}}),new he(`Tool ${b.name} not found in agent ${e.name}.`);s.push(new at(b,e)),i.push({toolCall:b,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:u,mcpApprovalRequests:p,toolsUsed:d,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||p.length>0||u.length>0}}}const Du=fe("type",[m({type:g("next_step_handoff"),newAgent:U()}),m({type:g("next_step_final_output"),output:c()}),m({type:g("next_step_run_again")}),m({type:g("next_step_interruption"),data:te(c(),U())})]);class be{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function ia(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function oa(n,e,t,r,s,a,i){const u=t.filter(w=>w instanceof we&&"callId"in w.rawItem&&w.rawItem.type==="function_call").map(w=>w.rawItem.callId),p=s.functions.filter(w=>u.includes(w.toolCall.callId)),d=await ca(n,p,a,i),l=d.map(w=>w.runItem),f=s.mcpApprovalRequests.filter(w=>{var b;return w.requestItem.type==="tool_approval_item"&&w.requestItem.rawItem.type==="hosted_tool_call"&&((b=w.requestItem.rawItem.providerData)==null?void 0:b.type)==="mcp_approval_request"});for(const w of f){const b=w.requestItem.rawItem.id,O=i._context.isToolApproved({toolName:w.requestItem.rawItem.name,callId:b});if(typeof O<"u"){const R={approve:O,approval_request_id:b,reason:void 0};l.push(new at({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await da(n,d,i),v=t.filter(w=>!(w instanceof we));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new be(e,r,v,l,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new be(e,r,v,l,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new be(e,r,v,l,{type:"next_step_run_again"})}async function ua(n,e,t,r,s,a,i){var O,R,F,V;const u=t;let p=s.newItems;const[d,l]=await Promise.all([ca(n,s.functions,a,i),Mu(n,s.computerActions,a,i._context)]);if(p=p.concat(d.map(q=>q.runItem)),p=p.concat(l),s.mcpApprovalRequests.length>0)for(const q of s.mcpApprovalRequests){const J=q.mcpTool.providerData,ae=q.requestItem.rawItem.providerData;if(J.on_approval){const ye=await J.on_approval(i._context,q.requestItem),qt={approve:ye.approve,approval_request_id:ae.id,reason:ye.reason};p.push(new at({type:"hosted_tool_call",name:"mcp_approval_response",providerData:qt},n))}else{p.push(q.requestItem);const ye={type:"hosted_mcp_tool_approval",tool:q.mcpTool,runItem:new we({type:"hosted_tool_call",name:ae.name,id:ae.id,arguments:ae.arguments,status:"in_progress",providerData:ae},n)};d.push(ye)}}if(s.handoffs.length>0)return await ju(n,e,u,p,r,s.handoffs,a,i._context);const f=await da(n,d,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new be(e,r,u,p,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new be(e,r,u,p,{type:"next_step_interruption",data:{interruptions:f.interruptions}});if((((O=s.functions)==null?void 0:O.length)??0)>0||(((R=s.computerActions)==null?void 0:R.length)??0)>0||(((F=s.mcpApprovalRequests)==null?void 0:F.length)??0)>0||(((V=s.handoffs)==null?void 0:V.length)??0)>0)return new be(e,r,u,p,{type:"next_step_run_again"});const v=p.filter(q=>q instanceof Wn),w=v.length>0?sa(v[v.length-1].rawItem):void 0;if(typeof w>"u")return new be(e,r,u,p,{type:"next_step_run_again"});if(!d.some(q=>q.runItem instanceof we)){if(n.outputType==="text")return new be(e,r,u,p,{type:"next_step_final_output",output:w});if(n.outputType!=="text"&&w){const{parser:q}=_r(n.outputType,"final_output"),[J]=await Q(()=>q(w));if(J)throw Tt({message:"Invalid output type",data:{error:String(J)}}),new he("Invalid output type");return new be(e,r,u,p,{type:"next_step_final_output",output:w})}}return new be(e,r,u,p,{type:"next_step_run_again"})}function Hn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:Je(e)}}}async function ca(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(nt(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const p=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(p===!1)return Zs(async d=>{const l="Tool execution was not approved.";return d.setError({message:l,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),d.spanData.output=l,{type:"function_output",tool:a.tool,output:l,runItem:new kt(Hn(a.toolCall,l),n,l)}},{data:{name:a.tool.name}});if(p!==!0)return{type:"function_approval",tool:a.tool,runItem:new we(a.toolCall,n)}}return Zs(async p=>{t.config.traceIncludeSensitiveData&&(p.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const d=await a.tool.invoke(r._context,a.toolCall.arguments,{toolCall:a.toolCall}),l=Je(d);t.emit("agent_tool_end",r._context,n,a.tool,l,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,l,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(p.spanData.output=l);const f={type:"function_output",tool:a.tool,output:d,runItem:new kt(Hn(a.toolCall,d),n,d)},h=zu(a.toolCall);if(h){f.agentRunResult=h;const v=h.interruptions;v.length>0&&(f.interruptions=v)}return f}catch(d){throw p.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(d)}}),d}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new yo(`Failed to run function tools: ${a}`,a,r)}}async function Pu(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function Mu(n,e,t,r,s=void 0){const a=s??E,i=[];for(const u of e){const p=u.computer.computer,d=u.toolCall;t.emit("agent_tool_start",r,n,u.computer,{toolCall:d}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,u.computer,{toolCall:d});let l;try{l=await Pu(p,d)}catch(v){a.error("Failed to execute computer action:",v),l=""}t.emit("agent_tool_end",r,n,u.computer,l,{toolCall:d}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,u.computer,l,{toolCall:d});const f=l?`data:image/png;base64,${l}`:"",h={type:"computer_call_result",callId:d.callId,output:{type:"computer_screenshot",data:f}};i.push(new kt(h,n,f))}return i}async function ju(n,e,t,r,s,a,i,u){if(r=[...r],a.length===0)return E.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new be(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const d="Multiple handoffs detected, ignoring this one.";for(let l=1;l<a.length;l++)r.push(new kt(Hn(a[l].toolCall,d),n,d))}const p=a[0];return Xo(async d=>{const l=p.handoff,f=await l.onInvokeHandoff(u,p.toolCall.arguments);if(d.spanData.to_agent=f.name,a.length>1){const v=a.map(w=>w.handoff.agentName);d.setError({message:"Multiple handoffs requested",data:{requested_agents:v}})}r.push(new jr(Hn(p.toolCall,Gs(f)),n,f)),i.emit("agent_handoff",u,n,f),n.emit("agent_handoff",u,f);const h=l.inputFilter??i.config.handoffInputFilter;if(h){E.debug("Filtering inputs for handoff"),typeof h!="function"&&d.setError({message:"Invalid input filter",data:{details:"not callable"}});const v={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:u},w=h(v);e=w.inputHistory,t=w.preHandoffItems,r=w.newItems}return new be(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Kn={isFinalOutput:!1,isInterrupted:void 0};async function da(n,e,t){if(e.length===0)return Kn;const r=[];for(const i of e)if(i.runItem instanceof we&&r.push(i.runItem),i.type==="function_output"){if(Array.isArray(i.interruptions))r.push(...i.interruptions);else if(i.agentRunResult){const u=i.agentRunResult.interruptions;u.length>0&&r.push(...u)}}if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Kn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Je(s.output)}:Kn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(u=>a.stopAtToolNames.includes(u.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:Je(i.output)}:Kn}if(typeof a=="function")return a(t._context,e);throw new ne(`Invalid toolUseBehavior: ${a}`,t)}function la(n,e){for(const t of e.newStepItems){let r;if(t instanceof Wn)r="message_output_created";else if(t instanceof Mr)r="handoff_requested";else if(t instanceof jr)r="handoff_occurred";else if(t instanceof at)r="tool_called";else if(t instanceof kt)r="tool_output";else if(t instanceof Pr)r="reasoning_item_created";else if(t instanceof we)r="tool_approval_requested";else{E.warn("Unknown item type: ",t);continue}n._addItem(new Ru(r,t))}}class pa{constructor(){I(this,Mt,new Map)}addToolUse(e,t){o(this,Mt).set(e,t)}hasUsedTools(e){return o(this,Mt).has(e)}toJSON(){return Object.fromEntries(Array.from(o(this,Mt).entries()).map(([e,t])=>[e.name,t]))}}Mt=new WeakMap;const Yn="1.0",$u=g(Yn),Ee=m({name:c()}),fa=m({object:g("trace.span"),id:c(),trace_id:c(),parent_id:c().nullable(),started_at:c().nullable(),ended_at:c().nullable(),error:m({message:c(),data:te(c(),U()).optional()}).nullable(),span_data:te(c(),U())}).extend({previous_span:Oi(()=>fa).optional()}),ha=m({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),ma=m({usage:ha,output:G(Nr),responseId:c().optional(),providerData:te(c(),U()).optional()}),ga=fe("type",[m({type:g("message_output_item"),rawItem:zn,agent:Ee}),m({type:g("tool_call_item"),rawItem:Su.or(Xt),agent:Ee}),m({type:g("tool_call_output_item"),rawItem:Er,agent:Ee,output:c()}),m({type:g("reasoning_item"),rawItem:Rr,agent:Ee}),m({type:g("handoff_call_item"),rawItem:Qt,agent:Ee}),m({type:g("handoff_output_item"),rawItem:Er,sourceAgent:Ee,targetAgent:Ee}),m({type:g("tool_approval_item"),rawItem:Qt.or(Xt),agent:Ee})]),Fu=m({object:g("trace"),id:c(),workflow_name:c(),group_id:c().nullable(),metadata:te(c(),U())}),Lu=m({newItems:G(ga),toolsUsed:G(c()),handoffs:G(m({toolCall:U(),handoff:U()})),functions:G(m({toolCall:U(),tool:U()})),computerActions:G(m({toolCall:U(),computer:U()})),mcpApprovalRequests:G(m({requestItem:m({rawItem:m({type:g("hosted_tool_call"),name:c(),arguments:c().optional(),status:c().optional(),output:c().optional(),providerData:te(c(),U()).nullable().optional()})}),mcpTool:m({type:g("hosted_tool"),name:g("hosted_mcp"),providerData:te(c(),U())})})).optional()}),_a=m({tripwireTriggered:et(),outputInfo:U()}),Zu=m({guardrail:m({type:g("input"),name:c()}),output:_a}),Uu=m({guardrail:m({type:g("output"),name:c()}),agentOutput:U(),agent:Ee,output:_a}),ya=m({$schemaVersion:$u,currentTurn:A(),currentAgent:Ee,originalInput:c().or(G(Tu)),modelResponses:G(ma),context:m({usage:ha,approvals:te(c(),m({approved:G(c()).or(et()),rejected:G(c()).or(et())})),context:te(c(),U())}),toolUseTracker:te(c(),G(c())),maxTurns:A(),currentAgentSpan:fa.nullable().optional(),noActiveAgentRun:et(),inputGuardrailResults:G(Zu),outputGuardrailResults:G(Uu),currentStep:Du.optional(),lastModelResponse:ma.optional(),generatedItems:G(ga),lastProcessedResponse:Lu.optional(),trace:Fu.nullable()});class it{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new pa,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Vt()}get history(){return en(this._originalInput,this._generatedItems)}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Yn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=ya.safeParse(e);if(!t.success)throw new _o(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,v,w,b;const[r,s]=await Q(()=>JSON.parse(t));if(r)throw new ne(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new ne("Run state is missing schema version");if(a!==Yn)throw new ne(`Run state schema version ${a} is not supported. Please use version ${Yn}`);const i=ya.parse(JSON.parse(t)),u=qu(e),p=new It(i.context.context);p._rebuildApprovals(i.context.approvals);const d=u.get(i.currentAgent.name);if(!d)throw new ne(`Agent ${i.currentAgent.name} not found`);const l=new it(p,"",d,i.maxTurns);l._currentTurn=i.currentTurn,l._toolUseTracker=new pa;for(const[O,R]of Object.entries(i.toolUseTracker))l._toolUseTracker.addToolUse(u.get(O),R);if(i.currentAgentSpan){i.trace||E.warn("Trace is not set, skipping tracing setup");const O=Ce().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((v=i.trace)==null?void 0:v.group_id)??void 0,metadata:(w=i.trace)==null?void 0:w.metadata});l._currentAgentSpan=va(O,i.currentAgentSpan),l._trace=O}return l._noActiveAgentRun=i.noActiveAgentRun,l._inputGuardrailResults=i.inputGuardrailResults,l._outputGuardrailResults=i.outputGuardrailResults.map(O=>({...O,agent:u.get(O.agent.name)})),l._currentStep=i.currentStep,l._originalInput=i.originalInput,l._modelResponses=i.modelResponses.map(wa),l._lastTurnResponse=i.lastModelResponse?wa(i.lastModelResponse):void 0,l._generatedItems=i.generatedItems.map(O=>ba(O,u)),l._lastProcessedResponse=i.lastProcessedResponse?await Ju(u,l._currentAgent,l._context,i.lastProcessedResponse):void 0,((b=i.currentStep)==null?void 0:b.type)==="next_step_handoff"&&(l._currentStep={type:"next_step_handoff",newAgent:u.get(i.currentStep.newAgent.name)}),l}}function qu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof ot?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function va(n,e){const t=e.span_data,r=e.previous_span?va(n,e.previous_span):void 0,s=Ce().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function wa(n){const e=new Vn;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>Nr.parse(t)),responseId:n.responseId,providerData:n.providerData}}function ba(n,e){switch(n.type){case"message_output_item":return new Wn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new at(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new kt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Pr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new Mr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new jr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new we(n.rawItem,e.get(n.agent.name))}}async function Ju(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(d=>d.type==="function").map(d=>[d.name,d])),i=new Map(s.filter(d=>d.type==="computer").map(d=>[d.name,d])),u=new Map(e.handoffs.map(d=>d instanceof ot?[d.name,Vs(d)]:[d.toolName,d])),p={newItems:r.newItems.map(d=>ba(d,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(d=>{if(!u.has(d.handoff.toolName))throw new ne(`Handoff ${d.handoff.toolName} not found`);return{toolCall:d.toolCall,handoff:u.get(d.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async d=>{if(!a.has(d.tool.name))throw new ne(`Tool ${d.tool.name} not found`);return{toolCall:d.toolCall,tool:a.get(d.tool.name)}})),computerActions:r.computerActions.map(d=>{const l=d.computer.name;if(!i.has(l))throw new ne(`Computer tool ${l} not found`);return{toolCall:d.toolCall,computer:i.get(l)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(d=>({requestItem:new we(d.requestItem.rawItem,e),mcpTool:d.mcpTool}))};return{...p,hasToolsOrApprovalsToRun(){return p.handoffs.length>0||p.functions.length>0||p.mcpApprovalRequests.length>0||p.computerActions.length>0}}}const xa=10;function Sa(n,e){return n?!1:e?!0:"enabled_without_data"}function en(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class Bu extends su{constructor(t={}){super();I(this,ce);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??cu(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(Bs),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(Ar)}run(t,r,s={stream:!1,context:void 0}){return r instanceof it&&r._trace?Lo(r._trace,async()=>(r._currentAgentSpan&&qn(r._currentAgentSpan),s!=null&&s.stream?L(this,ce,Wr).call(this,t,r,s):L(this,ce,Gr).call(this,t,r,s))):Zo(async()=>s!=null&&s.stream?L(this,ce,Wr).call(this,t,r,s):L(this,ce,Gr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ce=new WeakSet,Gr=async function(t,r,s){return br(async()=>{var i,u;const a=r instanceof it?r:new it(s.context instanceof It?s.context:new It(s.context),r,t,s.maxTurns??xa);try{for(;;){const p=a._currentAgent.model!==void 0&&a._currentAgent.model!==""||this.config.model!==void 0&&this.config.model!=="";let d=Ta(a._currentAgent.model,this.config.model);if(typeof d=="string"&&(d=await this.config.modelProvider.getModel(d)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new ne("No model response found in previous state",a);const l=await oa(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);if(a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=l.originalInput,a._generatedItems=l.generatedItems,a._currentStep=l.nextStep,l.nextStep.type==="next_step_interruption")return new Dr(a);continue}if(a._currentStep.type==="next_step_run_again"){const l=[];if(a._currentAgent.handoffs&&l.push(...a._currentAgent.handoffs.map(Gn)),!a._currentAgentSpan){const V=l.map(q=>q.agentName);a._currentAgentSpan=Ls({data:{name:a._currentAgent.name,handoffs:V,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),qn(a._currentAgentSpan)}const f=await a._currentAgent.getAllTools(a._context),h=f.map(V=>na(V)),v=l.map(V=>ra(V));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=f.map(V=>V.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new vs(`Max turns (${a._maxTurns}) exceeded`,a);E.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await L(this,ce,zr).call(this,a);const w=en(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let b={...this.config.modelSettings,...a._currentAgent.modelSettings};const O=a._currentAgent.modelSettings;b=Ia(p,O,d,b),b=ia(a._currentAgent,a._toolUseTracker,b),a._lastTurnResponse=await d.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),prompt:await a._currentAgent.getPrompt(a._context),input:w,previousResponseId:s.previousResponseId,conversationId:s.conversationId,modelSettings:b,tools:h,outputType:xs(a._currentAgent.outputType),handoffs:v,tracing:Sa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const R=aa(a._lastTurnResponse,a._currentAgent,f,l);a._lastProcessedResponse=R;const F=await ua(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=F.originalInput,a._generatedItems=F.generatedItems,a._currentStep=F.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await L(this,ce,Vr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new Dr(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),Ht(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new Dr(a);E.debug("Running next loop")}}}catch(p){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(p)}}),p}finally{a._currentAgentSpan&&(((u=a._currentStep)==null?void 0:u.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),Ht())}})},zr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Bs));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Us(async u=>{const p=await i.run(s);return u.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new bs(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof bs?a:(t._currentTurn--,new ws(`Input guardrail failed to complete: ${a}`,a,t))}}},Vr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Ar));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const u=await Promise.all(s.map(async p=>Us(async d=>{const l=await p.run(i);return d.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:p.name}},t._currentAgentSpan)));for(const p of u)if(p.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:p.guardrail.name}}),new $n(`Output guardrail triggered: ${JSON.stringify(p.output.outputInfo)}`,p,t)}catch(u){throw u instanceof $n?u:new ws(`Output guardrail failed to complete: ${u}`,u,t)}}},Ka=async function(t,r){var s,a,i;try{for(;;){const u=t.state._currentAgent,p=u.handoffs.map(Gn),d=await u.getAllTools(t.state._context),l=d.map(h=>na(h)),f=p.map(h=>ra(h));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new ne("No model response found in previous state",t.state);const h=await oa(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(la(t,h),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=h.originalInput,t.state._generatedItems=h.generatedItems,t.state._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const q=p.map(J=>J.agentName);t.state._currentAgentSpan=Ls({data:{name:u.name,handoffs:q,tools:d.map(J=>J.name),output_type:u.outputSchemaName}}),t.state._currentAgentSpan.start(),qn(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new vs(`Max turns (${t.state._maxTurns}) exceeded`,t.state);E.debug(`Running agent ${u.name} (turn ${t.state._currentTurn})`);const h=u.model!==void 0&&u.model!==""||this.config.model!==void 0&&this.config.model!=="";let v=Ta(u.model,this.config.model);typeof v=="string"&&(v=await this.config.modelProvider.getModel(v)),t.state._currentTurn===1&&await L(this,ce,zr).call(this,t.state);let w={...this.config.modelSettings,...u.modelSettings};const b=u.modelSettings;w=Ia(h,b,v,w),w=ia(u,t.state._toolUseTracker,w);const O=en(t.input,t.newItems);t.state._noActiveAgentRun&&(u.emit("agent_start",t.state._context,u),this.emit("agent_start",t.state._context,u));let R;for await(const q of v.getStreamedResponse({systemInstructions:await u.getSystemPrompt(t.state._context),prompt:await u.getPrompt(t.state._context),input:O,previousResponseId:r.previousResponseId,conversationId:r.conversationId,modelSettings:w,tools:l,handoffs:f,outputType:xs(u.outputType),tracing:Sa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(q.type==="response_done"){const J=ea.parse(q);R={usage:new Vn(J.response.usage),output:J.response.output,responseId:J.response.id}}if(t.cancelled)return;t._addItem(new Ou(q))}if(t.state._noActiveAgentRun=!1,!R)throw new he("Model did not produce a final response!",t.state);t.state._lastTurnResponse=R,t.state._modelResponses.push(t.state._lastTurnResponse);const F=aa(t.state._lastTurnResponse,u,d,p);t.state._lastProcessedResponse=F;const V=await ua(u,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);la(t,V),t.state._toolUseTracker.addToolUse(u,F.toolsUsed),t.state._originalInput=V.originalInput,t.state._generatedItems=V.generatedItems,t.state._currentStep=V.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await L(this,ce,Vr).call(this,t.state,t.state._currentStep.output),this.emit("agent_end",t.state._context,u,t.state._currentStep.output),u.emit("agent_end",t.state._context,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),Ht()),t.state._currentAgentSpan=void 0,t._addItem(new Nu(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):E.debug("Running next loop")}}}catch(u){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(u)}}),u}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),Ht())}},Wr=async function(t,r,s){return s=s??{},br(async()=>{const a=r instanceof it?r:new it(s.context instanceof It?s.context:new It(s.context),r,t,s.maxTurns??xa),i=new Cu({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,L(this,ce,Ka).call(this,i,s).then(()=>{i._done()},u=>{i._raiseError(u)}),i})};function Ta(n,e){return typeof n=="string"&&n!==ot.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??ot.DEFAULT_MODEL_PLACEHOLDER}function Ia(n,e,t,r){var s,a,i,u,p,d,l,f;return qs()&&n&&(typeof t!="string"||!Bn(t))&&((s=e.providerData)!=null&&s.reasoning||(i=(a=e.providerData)==null?void 0:a.text)!=null&&i.verbosity||(u=e.providerData)!=null&&u.reasoning_effort)&&((p=r.providerData)==null||delete p.reasoning,(l=(d=r.providerData)==null?void 0:d.text)==null||delete l.verbosity,(f=r.providerData)==null||delete f.reasoning_effort),r}const $r=new WeakMap;function Gu(n,e){n&&$r.set(n,e)}function zu(n){const e=$r.get(n);return e&&$r.delete(n),e}const Vu=m({input:c()}),jt=class jt extends ru{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new ne("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??jt.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??iu(),this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,t.model!==void 0&&qs()&&(typeof t.model!="string"||!Bn(t.model))&&t.modelSettings===void 0&&(this.modelSettings={}),(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&E.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new jt({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(nt(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new jt({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a,needsApproval:i,runConfig:u,runOptions:p}=t;return Zn({name:r??Fn(this.name),description:s??"",parameters:Vu,strict:!0,needsApproval:i,execute:async(d,l,f)=>{if(!vo(d))throw new he("Agent tool called with invalid input");const v=await new Bu(u??{}).run(this,d.input,{context:l,...p??{}}),w=typeof a=="function"?await a(v):Eu(v.rawResponses[v.rawResponses.length-1]);return f!=null&&f.toolCall&&Gu(f.toolCall,v),w}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?Oo({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){return[...await this.getMcpTools(t),...this.tools]}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return nt(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(jt,"DEFAULT_MODEL_PLACEHOLDER","");let ot=jt;nu(Ms());function ka(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Aa(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Ca(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="output_text")return typeof e.text=="string"?e.text:void 0;if(e.type==="output_audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Wu(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function Hu(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Ea(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="output_audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function Oa(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(u=>u.type==="input_audio"?{...u,transcript:e.transcript}:u);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Ea(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Ea(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Ku={"User-Agent":`Agents/JavaScript ${W.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${W.version}`},Yu=`openai-agents-sdk.${W.version}`;function Xu(n,e){const{name:t,arguments:r,...s}=e;return new we({type:"hosted_tool_call",name:t,arguments:JSON.stringify(r),status:"in_progress",providerData:{...s}},n)}function Ra(n){const{name:e,arguments:t,providerData:r}=n.rawItem,{itemId:s,serverLabel:a,...i}=r??{};if(!s||!a)throw new Error("Invalid approval item for Realtime MCP approval request");return{type:"mcp_approval_request",itemId:s,serverLabel:a,...i,name:e,arguments:t?JSON.parse(t):{},approved:null}}class Qu extends ot{constructor(t){super(t);_(this,"voice");this.voice=t.voice}}function ec(n){return{debounceTextLength:n.debounceTextLength??100}}function tc({policyHint:n,...e}){const t=Ar(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function nc(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}const xe=Os("openai-agents:realtime");function ut(n,e){return n in e&&typeof e[n]<"u"}function rc(n){return ut("modalities",n)||ut("inputAudioFormat",n)||ut("outputAudioFormat",n)||ut("inputAudioTranscription",n)||ut("turnDetection",n)||ut("inputAudioNoiseReduction",n)||ut("speed",n)}function sc(n){var e,t,r,s,a,i,u,p;if(!rc(n)){const d=(e=n.audio)!=null&&e.input?{format:Xn(n.audio.input.format),noiseReduction:n.audio.input.noiseReduction??null,transcription:n.audio.input.transcription,turnDetection:n.audio.input.turnDetection}:void 0,l=((r=(t=n.audio)==null?void 0:t.output)==null?void 0:r.voice)??n.voice,f=(s=n.audio)!=null&&s.output||typeof l<"u"?{format:Xn((i=(a=n.audio)==null?void 0:a.output)==null?void 0:i.format),voice:l,speed:(p=(u=n.audio)==null?void 0:u.output)==null?void 0:p.speed}:void 0;return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.outputModalities,audio:d||f?{input:d,output:f}:void 0}}return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.modalities,audio:{input:{format:Xn(n.inputAudioFormat),noiseReduction:n.inputAudioNoiseReduction??null,transcription:n.inputAudioTranscription,turnDetection:n.turnDetection},output:{format:Xn(n.outputAudioFormat),voice:n.voice,speed:n.speed}}}}function Xn(n){if(!n)return;if(typeof n=="object")return n;const e=String(n);return e==="pcm16"?{type:"audio/pcm",rate:24e3}:e==="g711_ulaw"?{type:"audio/pcmu"}:e==="g711_alaw"?{type:"audio/pcma"}:{type:"audio/pcm",rate:24e3}}m({itemId:c()});const Na=fe("role",[m({itemId:c(),previousItemId:c().nullable().optional(),type:g("message"),role:g("system"),content:G(m({type:g("input_text"),text:c()}))}),m({itemId:c(),previousItemId:c().nullable().optional(),type:g("message"),role:g("user"),status:ie(["in_progress","completed"]),content:G(m({type:g("input_text"),text:c()}).or(m({type:g("input_audio"),audio:c().nullable().optional(),transcript:c().nullable()})))}),m({itemId:c(),previousItemId:c().nullable().optional(),type:g("message"),role:g("assistant"),status:ie(["in_progress","completed","incomplete"]),content:G(m({type:g("output_text"),text:c()}).or(m({type:g("output_audio"),audio:c().nullable().optional(),transcript:c().nullable().optional()})))})]),Da=m({itemId:c(),previousItemId:c().nullable().optional(),type:g("function_call"),status:ie(["in_progress","completed","incomplete"]),arguments:c(),name:c(),output:c().nullable()}),Pa=m({itemId:c(),previousItemId:c().nullable().optional(),type:ie(["mcp_call","mcp_tool_call"]),status:ie(["in_progress","completed","incomplete"]),arguments:c(),name:c(),output:c().nullable()}),ac=m({itemId:c(),type:g("mcp_approval_request"),serverLabel:c(),name:c(),arguments:te(c(),U()),approved:et().optional().nullable()}),Ma=m({id:c().optional().nullable(),conversation_id:c().optional().nullable(),max_output_tokens:A().or(g("inf")).optional().nullable(),metadata:te(c(),U()).optional().nullable(),output_modalities:G(c()).optional().nullable(),object:g("realtime.response").optional().nullable(),output:G(U()).optional().nullable(),audio:m({output:m({format:U().optional().nullable(),voice:c().optional().nullable()}).optional().nullable()}).optional().nullable(),status:ie(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:te(c(),U()).optional().nullable(),usage:m({input_tokens:A().optional(),input_tokens_details:te(c(),U()).optional().nullable(),output_tokens:A().optional(),output_tokens_details:te(c(),U()).optional().nullable()}).optional().nullable()}),ic=m({id:c().optional(),audio:c().nullable().optional(),text:c().nullable().optional(),transcript:c().nullable().optional(),type:ps([g("input_text"),g("input_audio"),g("item_reference"),g("output_text"),g("output_audio")])}),At=m({id:c().optional(),arguments:c().optional(),call_id:c().optional(),content:G(ic).optional(),name:c().optional(),output:c().nullable().optional(),role:ie(["user","assistant","system"]).optional(),status:ie(["completed","incomplete","in_progress"]).optional(),type:ie(["message","function_call","function_call_output","mcp_list_tools","mcp_tool_call","mcp_call","mcp_approval_request","mcp_approval_response"]).optional(),approval_request_id:c().nullable().optional(),approve:et().nullable().optional(),reason:c().nullable().optional(),server_label:c().optional(),error:U().nullable().optional(),tools:G(m({name:c(),description:c(),input_schema:te(U()).optional()}).passthrough()).optional()}).passthrough(),oc=m({type:g("conversation.created"),event_id:c(),conversation:m({id:c().optional(),object:g("realtime.conversation").optional()})}),uc=m({type:g("conversation.item.added"),event_id:c(),item:At,previous_item_id:c().nullable().optional()}),cc=m({type:g("conversation.item.done"),event_id:c(),item:At,previous_item_id:c().nullable().optional()}),dc=m({type:g("conversation.item.deleted"),event_id:c(),item_id:c()}),lc=m({type:g("conversation.item.input_audio_transcription.completed"),event_id:c(),item_id:c(),content_index:A(),transcript:c(),logprobs:G(U()).nullable().optional()}),pc=m({type:g("conversation.item.input_audio_transcription.delta"),event_id:c(),item_id:c(),content_index:A().optional(),delta:c().optional(),logprobs:G(U()).nullable().optional()}),fc=m({type:g("conversation.item.input_audio_transcription.failed"),event_id:c(),item_id:c(),content_index:A(),error:m({code:c().optional(),message:c().optional(),param:c().optional(),type:c().optional()})}),hc=m({type:g("conversation.item.retrieved"),event_id:c(),item:At}),mc=m({type:g("conversation.item.truncated"),event_id:c(),item_id:c(),audio_end_ms:A(),content_index:A()}),gc=m({type:g("conversation.item.create"),item:At,event_id:c().optional(),previous_item_id:c().nullable().optional()}),_c=m({type:g("conversation.item.delete"),item_id:c(),event_id:c().optional()}),yc=m({type:g("conversation.item.retrieve"),item_id:c(),event_id:c().optional()}),vc=m({type:g("conversation.item.truncate"),item_id:c(),audio_end_ms:A(),content_index:A(),event_id:c().optional()}),wc=m({type:g("error"),event_id:c().optional(),error:U().optional()}),bc=m({type:g("input_audio_buffer.cleared"),event_id:c()}),xc=m({type:g("input_audio_buffer.append"),audio:c(),event_id:c().optional()}),Sc=m({type:g("input_audio_buffer.clear"),event_id:c().optional()}),Tc=m({type:g("input_audio_buffer.commit"),event_id:c().optional()}),Ic=m({type:g("input_audio_buffer.committed"),event_id:c(),item_id:c(),previous_item_id:c().nullable().optional()}),kc=m({type:g("input_audio_buffer.speech_started"),event_id:c(),item_id:c(),audio_start_ms:A()}),Ac=m({type:g("input_audio_buffer.speech_stopped"),event_id:c(),item_id:c(),audio_end_ms:A()}),Cc=m({type:g("output_audio_buffer.started"),event_id:c()}).passthrough(),Ec=m({type:g("output_audio_buffer.stopped"),event_id:c()}).passthrough(),Oc=m({type:g("output_audio_buffer.cleared"),event_id:c()}),Rc=m({type:g("rate_limits.updated"),event_id:c(),rate_limits:G(m({limit:A().optional(),name:ie(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),Nc=m({type:g("response.output_audio.delta"),event_id:c(),item_id:c(),content_index:A(),delta:c(),output_index:A(),response_id:c()}),Dc=m({type:g("response.output_audio.done"),event_id:c(),item_id:c(),content_index:A(),output_index:A(),response_id:c()}),Pc=m({type:g("response.output_audio_transcript.delta"),event_id:c(),item_id:c(),content_index:A(),delta:c(),output_index:A(),response_id:c()}),Mc=m({type:g("response.output_audio_transcript.done"),event_id:c(),item_id:c(),content_index:A(),transcript:c(),output_index:A(),response_id:c()}),jc=m({type:g("response.content_part.added"),event_id:c(),item_id:c(),content_index:A(),output_index:A(),response_id:c(),part:m({audio:c().optional(),text:c().optional(),transcript:c().optional(),type:ie(["text","audio"]).optional()})}),$c=m({type:g("response.content_part.done"),event_id:c(),item_id:c(),content_index:A(),output_index:A(),response_id:c(),part:m({audio:c().optional(),text:c().optional(),transcript:c().optional(),type:ie(["text","audio"]).optional()})}),Fc=m({type:g("response.created"),event_id:c(),response:Ma}),ja=m({type:g("response.done"),event_id:c(),response:Ma}),Lc=m({type:g("response.function_call_arguments.delta"),event_id:c(),item_id:c(),call_id:c(),delta:c(),output_index:A(),response_id:c()}),Zc=m({type:g("response.function_call_arguments.done"),event_id:c(),item_id:c(),call_id:c(),arguments:c(),output_index:A(),response_id:c()}),Uc=m({type:g("response.output_item.added"),event_id:c(),item:At,output_index:A(),response_id:c()}),qc=m({type:g("response.output_item.done"),event_id:c(),item:At,output_index:A(),response_id:c()}),Jc=m({type:g("response.output_text.delta"),event_id:c(),item_id:c(),content_index:A(),delta:c(),output_index:A(),response_id:c()}),Bc=m({type:g("response.output_text.done"),event_id:c(),item_id:c(),content_index:A(),text:c(),output_index:A(),response_id:c()}),Gc=m({type:g("session.created"),event_id:c(),session:U()}),zc=m({type:g("session.updated"),event_id:c(),session:U()}),Vc=m({type:g("response.cancel"),event_id:c().optional(),response_id:c().optional()}),Wc=m({type:g("response.create"),event_id:c().optional(),response:U().optional()}),Hc=m({type:g("session.update"),event_id:c().optional(),session:U()}),Kc=m({type:g("mcp_list_tools.in_progress"),event_id:c().optional(),item_id:c().optional()}),Yc=m({type:g("mcp_list_tools.completed"),event_id:c().optional(),item_id:c().optional()}),Xc=m({type:g("response.mcp_call_arguments.delta"),event_id:c(),response_id:c(),item_id:c(),output_index:A(),delta:c(),obfuscation:c()}),Qc=m({type:g("response.mcp_call_arguments.done"),event_id:c(),response_id:c(),item_id:c(),output_index:A(),arguments:c()}),ed=m({type:g("response.mcp_call.in_progress"),event_id:c(),output_index:A(),item_id:c()}),td=m({type:g("response.mcp_call.completed"),event_id:c(),output_index:A(),item_id:c()}),nd=m({type:g("mcp_list_tools.failed"),event_id:c().optional(),item_id:c().optional()}),rd=m({type:c(),event_id:c().optional().nullable()}).passthrough(),sd=fe("type",[oc,uc,cc,dc,lc,pc,fc,hc,mc,wc,bc,Ic,kc,Ac,Cc,Ec,Oc,Rc,Nc,Dc,Pc,Mc,jc,$c,Fc,ja,Lc,Zc,Uc,qc,Jc,Bc,Gc,zc,Kc,Yc,nd,Xc,Qc,ed,td]);fe("type",[gc,_c,yc,vc,xc,Sc,Tc,Vc,Wc,Hc]);function Fr(n){const e=JSON.parse(n.data.toString()),t=sd.safeParse(e);if(!t.success){const r=rd.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const $a="gpt-realtime",Oe={outputModalities:["audio"],audio:{input:{format:{type:"audio/pcm",rate:24e3},transcription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},noiseReduction:null},output:{format:{type:"audio/pcm",rate:24e3},speed:1}}},Ur=class Ur extends kr{constructor(t={}){super();I(this,ht);I(this,fn);I(this,pe,null);I(this,hn,null);_(this,"eventEmitter",new Un);y(this,ht,t.model??$a),y(this,fn,t.apiKey)}get currentModel(){return o(this,ht)}set currentModel(t){y(this,ht,t)}get _rawSessionConfig(){return o(this,hn)??null}async _getApiKey(t){const r=t.apiKey??o(this,fn);return typeof r=="function"?await r():r}_onMessage(t){var a,i,u,p,d,l;const{data:r,isGeneric:s}=Fr(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&y(this,hn,r.session),r.type==="response.done"){const f=ja.safeParse(r);if(!f.success){xe.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,v=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,w=h+v,b=new Vn({inputTokens:h,inputTokensDetails:((u=f.data.response.usage)==null?void 0:u.input_tokens_details)??{},outputTokens:v,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_tokens_details)??{},totalTokens:w});this.emit("usage_update",b),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((d=f.data.response.usage)==null?void 0:d.input_tokens_details)??{},outputTokens:v,outputTokensDetails:((l=f.data.response.usage)==null?void 0:l.output_tokens_details)??{},totalTokens:w}}});return}if(r.type==="response.output_audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.output_text.delta"||r.type==="response.output_audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.output_audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if(r.type==="conversation.item.added"||r.type==="conversation.item.done"||r.type==="conversation.item.retrieved"){if(r.item.type==="mcp_list_tools"&&r.type==="conversation.item.done"){const f=r.item.server_label??"",h=r.item.tools??[];try{this.emit("mcp_tools_listed",{serverLabel:f,tools:h})}catch(v){xe.error("Error emitting mcp_tools_listed",v,r.item)}return}if(r.item.type==="message"){const f=r.type==="conversation.item.added"||r.type==="conversation.item.done"?r.previous_item_id:null,h=Na.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.item.type==="mcp_approval_request"&&r.type==="conversation.item.done"){const f=r.item,h=ac.parse({itemId:f.id,type:f.type,serverLabel:f.server_label,name:f.name,arguments:JSON.parse(f.arguments||"{}"),approved:f.approved});this.emit("item_update",h),this.emit("mcp_approval_request",h);return}if(r.item.type==="mcp_tool_call"||r.item.type==="mcp_call"){const f=r.type==="conversation.item.done"?"completed":"in_progress",h=Pa.parse({itemId:r.item.id,type:r.item.type,status:f,arguments:r.item.arguments,name:r.item.name,output:r.item.output});this.emit("item_update",h),r.type==="conversation.item.done"&&this.emit("mcp_tool_call_completed",h);return}}if(r.type==="response.mcp_call.in_progress"){const f=r;this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="mcp_list_tools.in_progress"){const f=r;f.item_id&&this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=Da.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="mcp_tool_call"||f.type==="mcp_call"){const h=Pa.parse({itemId:f.id,type:f.type,status:r.type==="response.output_item.done"?"completed":"in_progress",arguments:f.arguments,name:f.name,output:f.output});this.emit("item_update",h);return}if(f.type==="message"){const h=Na.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:r.type==="response.output_item.done"?f.status??"completed":f.status??"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r,{triggerResponse:s=!0}={}){const a=typeof t=="string"?[{type:"input_text",text:t}]:t.content.map(i=>i.type==="input_image"?{type:"input_image",image_url:i.image,...i.providerData??{}}:i);this.sendEvent({type:"conversation.item.create",item:{type:"message",role:"user",content:a},...r}),s&&this.sendEvent({type:"response.create"})}addImage(t,{triggerResponse:r=!0}={}){this.sendMessage({type:"message",role:"user",content:[{type:"input_image",image:t}]},{},{triggerResponse:r})}_getMergedSessionConfig(t){var a,i,u,p,d,l,f,h,v,w,b,O,R,F,V,q,J,ae,ye,qt,Sn,tr,qa,Ja,Ba,Ga,za,Va;const r=sc(t),s={type:"realtime",instructions:r.instructions,model:r.model??o(this,ht),output_modalities:r.outputModalities??Oe.outputModalities,audio:{input:{format:((i=(a=r.audio)==null?void 0:a.input)==null?void 0:i.format)??((p=(u=Oe.audio)==null?void 0:u.input)==null?void 0:p.format),noise_reduction:((l=(d=r.audio)==null?void 0:d.input)==null?void 0:l.noiseReduction)??((h=(f=Oe.audio)==null?void 0:f.input)==null?void 0:h.noiseReduction),transcription:((w=(v=r.audio)==null?void 0:v.input)==null?void 0:w.transcription)??((O=(b=Oe.audio)==null?void 0:b.input)==null?void 0:O.transcription),turn_detection:Ur.buildTurnDetectionConfig((F=(R=r.audio)==null?void 0:R.input)==null?void 0:F.turnDetection)??((q=(V=Oe.audio)==null?void 0:V.input)==null?void 0:q.turnDetection)},output:{format:((ae=(J=r.audio)==null?void 0:J.output)==null?void 0:ae.format)??((qt=(ye=Oe.audio)==null?void 0:ye.output)==null?void 0:qt.format),voice:((tr=(Sn=r.audio)==null?void 0:Sn.output)==null?void 0:tr.voice)??((Ja=(qa=Oe.audio)==null?void 0:qa.output)==null?void 0:Ja.voice),speed:((Ga=(Ba=r.audio)==null?void 0:Ba.output)==null?void 0:Ga.speed)??((Va=(za=Oe.audio)==null?void 0:za.output)==null?void 0:Va.speed)}},tool_choice:r.toolChoice??Oe.toolChoice,...r.providerData??{}};return r.prompt&&(s.prompt={id:r.prompt.promptId,version:r.prompt.version,variables:r.prompt.variables}),r.tools&&r.tools.length>0&&(s.tools=r.tools.map(ld=>({...ld,strict:void 0}))),s}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:u,interrupt_response:p,prefixPaddingMs:d,prefix_padding_ms:l,silenceDurationMs:f,silence_duration_ms:h,threshold:v,idleTimeoutMs:w,idle_timeout_ms:b,...O}=t,R={type:r,create_response:s||a,eagerness:i,interrupt_response:u||p,prefix_padding_ms:d||l,silence_duration_ms:f||h,idle_timeout_ms:w||b,threshold:v,...O};return Object.keys(R).forEach(F=>{R[F]===void 0&&delete R[F]}),Object.keys(R).length>0?R:void 0}set _tracingConfig(t){y(this,pe,t)}_updateTracingConfig(t){var r,s,a;if(typeof o(this,pe)>"u"&&y(this,pe,null),t==="auto"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:"auto"}});return}if(o(this,pe)!==null&&typeof o(this,pe)!="string"&&typeof t!="string"){xe.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){xe.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{type:"realtime",tracing:null}});return}if(o(this,pe)===null||typeof o(this,pe)=="string"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=o(this,pe))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=o(this,pe))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=o(this,pe))==null?void 0:a.workflow_name)){xe.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(o(this,pe)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=Da.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){xe.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Aa(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Wu(t,r),u=new Set(s.map(d=>d.itemId));for(const d of i)u.add(d.itemId);if(u.size>0)for(const d of u)this.sendEvent({type:"conversation.item.delete",item_id:d});const p=[...a,...i];for(const d of p)if(d.type==="message"){const l={type:"message",role:d.role,content:d.content,id:d.itemId};d.role!=="system"&&d.status&&(l.status=d.status),this.sendEvent({type:"conversation.item.create",item:l})}else d.type==="function_call"&&xe.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}sendMcpResponse(t,r){this.sendEvent({type:"conversation.item.create",previous_item_id:t.itemId,item:{type:"mcp_approval_response",approval_request_id:t.itemId,approve:r}})}};ht=new WeakMap,fn=new WeakMap,pe=new WeakMap,hn=new WeakMap;let tn=Ur;class Fa extends tn{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");I(this,mn);I(this,K,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0});I(this,gn);I(this,mt,!1);I(this,_n,!1);this.options=t,y(this,mn,t.baseUrl??"https://api.openai.com/v1/realtime/calls"),y(this,gn,t.useInsecureApiKey??!1)}get callId(){return o(this,K).callId}get status(){return o(this,K).status}get connectionState(){return o(this,K)}get muted(){return o(this,_n)}async connect(t){if(o(this,K).status==="connected")return;o(this,K).status==="connecting"&&xe.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??o(this,mn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!o(this,gn)&&!i)throw new ne("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");return new Promise(async(u,p)=>{var d,l;try{const f={...t.initialSessionConfig||{},model:this.currentModel},h=new URL(s);let v=new RTCPeerConnection;const w=v.createDataChannel("oai-events");let b;y(this,K,{status:"connecting",peerConnection:v,dataChannel:w,callId:b}),this.emit("connection_change",o(this,K).status),w.addEventListener("open",()=>{y(this,K,{status:"connected",peerConnection:v,dataChannel:w,callId:b}),this.updateSessionConfig(f),this.emit("connection_change",o(this,K).status),this._onOpen(),u()}),w.addEventListener("error",J=>{this.close(),this._onError(J),p(J)}),w.addEventListener("message",J=>{this._onMessage(J);const{data:ae,isGeneric:ye}=Fr(J);!ae||ye||(ae.type==="response.created"?y(this,mt,!0):ae.type==="response.done"&&y(this,mt,!1),ae.type==="session.created"&&(this._tracingConfig=ae.session.tracing,this._updateTracingConfig(f.tracing??"auto")))});const O=this.options.audioElement??document.createElement("audio");O.autoplay=!0,v.ontrack=J=>{O.srcObject=J.streams[0]};const R=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});v.addTrack(R.getAudioTracks()[0]),this.options.changePeerConnection&&(v=await this.options.changePeerConnection(v),y(this,K,{...o(this,K),peerConnection:v}));const F=await v.createOffer();if(await v.setLocalDescription(F),!F.sdp)throw new Error("Failed to create offer");const V=await fetch(h,{method:"POST",body:F.sdp,headers:{"Content-Type":"application/sdp",Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Ku["X-OpenAI-Agents-SDK"]}});b=(l=(d=V.headers)==null?void 0:d.get("Location"))==null?void 0:l.split("/").pop(),y(this,K,{...o(this,K),callId:b});const q={type:"answer",sdp:await V.text()};await v.setRemoteDescription(q)}catch(f){this.close(),this._onError(f),p(f)}})}sendEvent(t){if(!o(this,K).dataChannel||o(this,K).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");o(this,K).dataChannel.send(JSON.stringify(t))}mute(t){y(this,_n,t),o(this,K).peerConnection&&o(this,K).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(o(this,K).dataChannel&&o(this,K).dataChannel.close(),o(this,K).peerConnection){const t=o(this,K).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}o(this,K).status!=="disconnected"&&(y(this,K,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0}),this.emit("connection_change",o(this,K).status),this._onClose())}interrupt(){o(this,mt)&&(this.sendEvent({type:"response.cancel"}),y(this,mt,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}mn=new WeakMap,K=new WeakMap,gn=new WeakMap,mt=new WeakMap,_n=new WeakMap;const ad=globalThis.WebSocket;class La extends tn{constructor(t={}){super(t);I(this,er);I(this,gt);I(this,_t);I(this,se,{status:"disconnected",websocket:void 0});I(this,yn);I(this,Le);I(this,yt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);I(this,vt,!1);y(this,_t,t.url),y(this,yn,t.useInsecureApiKey??!1)}get status(){return o(this,se).status}get connectionState(){return o(this,se)}get muted(){return null}get currentItemId(){return o(this,Le)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,gt,await this._getApiKey(t));const s=t.url??o(this,_t)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;y(this,_t,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,u)=>{try{L(this,er,Ya).call(this,i,u,a)}catch(p){u(p)}}),await this.updateSessionConfig(a)}sendEvent(t){if(!o(this,se).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");o(this,se).websocket.send(JSON.stringify(t))}close(){var t;(t=o(this,se).websocket)==null||t.close(),y(this,Le,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,yt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){o(this,se).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){o(this,vt)&&(this.sendEvent({type:"response.cancel"}),y(this,vt,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.min(Math.floor(t),s));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:o(this,Le),content_index:o(this,yt),audio_end_ms:a})}interrupt(t=!0){if(!o(this,Le)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),y(this,Le,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,yt,void 0)}}gt=new WeakMap,_t=new WeakMap,se=new WeakMap,yn=new WeakMap,Le=new WeakMap,yt=new WeakMap,vt=new WeakMap,er=new WeakSet,Ya=function(t,r,s){if(o(this,se).websocket){t();return}if(!o(this,gt))throw new ne("API key is not set. Please call `connect()` with an API key first.");if(!o(this,gt).startsWith("ek_")&&!o(this,yn))throw new ne("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");const a=["realtime","openai-insecure-api-key."+o(this,gt),Yu],i=new ad(o(this,_t),a);y(this,se,{status:"connecting",websocket:i}),this.emit("connection_change",o(this,se).status),i.addEventListener("open",()=>{y(this,se,{status:"connected",websocket:i}),this.emit("connection_change",o(this,se).status),this._onOpen(),t()}),i.addEventListener("error",u=>{this._onError(u),y(this,se,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,se).status),r(u)}),i.addEventListener("message",u=>{var l,f,h,v,w,b,O;this._onMessage(u);const{data:p,isGeneric:d}=Fr(u);if(!(!p||d))if(p.type==="response.output_audio.delta"){y(this,yt,p.content_index),y(this,Le,p.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const R=ka(p.delta),F=(h=(f=(l=this._rawSessionConfig)==null?void 0:l.audio)==null?void 0:f.output)==null?void 0:h.format;if(F&&typeof F=="object"){const q=F.type;if(q==="audio/pcmu"||q==="audio/pcma")this._audioLengthMs+=R.byteLength/8;else if(q==="audio/pcm"){const J=F.rate??24e3;this._audioLengthMs+=R.byteLength/2/J*1e3}else this._audioLengthMs+=R.byteLength/24/2}else typeof F=="string"?F.startsWith("g711_")?this._audioLengthMs+=R.byteLength/8:this._audioLengthMs+=R.byteLength/24/2:this._audioLengthMs+=R.byteLength/24/2;const V={type:"audio",data:R,responseId:p.response_id};this._onAudio(V)}else if(p.type==="input_audio_buffer.speech_started"){const R=((O=(b=(w=(v=this._rawSessionConfig)==null?void 0:v.audio)==null?void 0:w.input)==null?void 0:b.turn_detection)==null?void 0:O.interrupt_response)??!1;this.interrupt(!R)}else p.type==="response.created"?y(this,vt,!0):p.type==="response.done"?y(this,vt,!1):p.type==="session.created"&&(this._tracingConfig=p.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),i.addEventListener("close",()=>{y(this,se,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,se).status),this._onClose()})};const Za=Symbol("backgroundResult");function id(n){return{[Za]:!0,content:n}}function Ua(n){return typeof n=="object"&&n!==null&&Za in n}function od(n){return n.type==="function"||n.type==="hosted_tool"&&n.name==="hosted_mcp"}function ud(n){if(n.type==="function")return n;if(n.type==="hosted_tool"&&n.name==="hosted_mcp"){const e=n.providerData.server_url&&n.providerData.server_url.length>0?n.providerData.server_url:void 0;return{type:"mcp",server_label:n.providerData.server_label,server_url:e,headers:n.providerData.headers,allowed_tools:n.providerData.allowed_tools,require_approval:n.providerData.require_approval}}throw new ne(`Invalid tool type: ${n}`)}class cd extends Un{constructor(t,r={}){super();I(this,Y);_(this,"initialAgent");_(this,"options");I(this,$);I(this,D);I(this,$t);I(this,P);I(this,Ft,[]);I(this,Lt);I(this,vn,{});I(this,X,[]);I(this,Zt);I(this,Ut,{});I(this,Re,!1);I(this,wn,new Map);I(this,wt,[]);I(this,bn,null);I(this,xn,!0);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&Hu()||r.transport==="webrtc"?y(this,$,new Fa):r.transport==="websocket"||typeof r.transport>"u"?y(this,$,new La):y(this,$,r.transport),y(this,D,t),y(this,P,new It({...r.context??{},history:o(this,X)})),y(this,Ft,(r.outputGuardrails??[]).map(tc)),y(this,Lt,ec(r.outputGuardrailSettings??{})),y(this,Zt,r.historyStoreAudio??!1),y(this,xn,r.automaticallyTriggerResponseForMcpToolCalls??!0)}get transport(){return o(this,$)}get currentAgent(){return o(this,D)}get usage(){return o(this,P).usage}get context(){return o(this,P)}get muted(){return o(this,$).muted}get history(){return o(this,X)}get availableMcpTools(){return o(this,wt)}async updateAgent(t){return o(this,D).emit("agent_handoff",o(this,P),t),this.emit("agent_handoff",o(this,P),o(this,D),t),await L(this,Y,nr).call(this,t),await o(this,$).updateSessionConfig(await L(this,Y,rr).call(this)),t}async connect(t){await L(this,Y,nr).call(this,this.initialAgent),L(this,Y,ei).call(this),await o(this,$).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await L(this,Y,rr).call(this,this.options.config)}),y(this,X,[]),this.emit("history_updated",o(this,X))}updateHistory(t){let r;typeof t=="function"?r=t(o(this,X)):r=t,o(this,$).resetHistory(o(this,X),r)}sendMessage(t,r={}){o(this,$).sendMessage(t,r)}addImage(t,{triggerResponse:r=!0}={}){o(this,$).addImage(t,{triggerResponse:r})}mute(t){o(this,$).mute(t)}close(){y(this,Ut,{}),o(this,$).close()}sendAudio(t,r={}){o(this,$).sendAudio(t,r)}interrupt(){o(this,$).interrupt()}async approve(t,r={alwaysApprove:!1}){o(this,P).approveTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,Y,sr).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysApprove&&xe.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");const a=Ra(t);o(this,$).sendMcpResponse(a,!0)}else throw new he(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){o(this,P).rejectTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,Y,sr).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysReject&&xe.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");const a=Ra(t);o(this,$).sendMcpResponse(a,!1)}else throw new he(`Tool ${t.rawItem.name} not found`)}}$=new WeakMap,D=new WeakMap,$t=new WeakMap,P=new WeakMap,Ft=new WeakMap,Lt=new WeakMap,vn=new WeakMap,X=new WeakMap,Zt=new WeakMap,Ut=new WeakMap,Re=new WeakMap,wn=new WeakMap,wt=new WeakMap,bn=new WeakMap,xn=new WeakMap,Y=new WeakSet,nr=async function(t){y(this,D,t);const r=o(this,D).handoffs.map(Gn),s=r.map(p=>p.getHandoffAsFunctionTool()),a=(await o(this,D).getAllTools(o(this,P))).filter(od).map(ud),i=typeof o(this,D).tools<"u"||typeof o(this,D).mcpServers<"u",u=r.length>0;y(this,$t,i||u?[...a,...s]:void 0),L(this,Y,Kr).call(this)},rr=async function(t={}){const r=await o(this,D).getSystemPrompt(o(this,P)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&xe.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...o(this,bn)??{},...this.options.config??{},...t??{}},instructions:r,voice:o(this,D).voice,model:this.options.model,tools:o(this,$t),tracing:s,prompt:typeof o(this,D).prompt=="function"?await o(this,D).prompt(o(this,P),o(this,D)):o(this,D).prompt};return y(this,bn,i),i},Xa=async function(t,r){const s=await r.onInvokeHandoff(o(this,P),t.arguments);o(this,D).emit("agent_handoff",o(this,P),s),this.emit("agent_handoff",o(this,P),o(this,D),s),await L(this,Y,nr).call(this,s),await o(this,$).updateSessionConfig(await L(this,Y,rr).call(this));const a=Gs(s);return o(this,$).sendFunctionCallOutput(t,a,!0),s},sr=async function(t,r){o(this,P).context.history=JSON.parse(JSON.stringify(o(this,X)));let s=t.arguments;if(r.parameters&&(nt(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(o(this,P),s,t.callId)){const p=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(p===!1){this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t});const d="Tool execution was not approved.";o(this,$).sendFunctionCallOutput(t,d,!0),this.emit("agent_tool_end",o(this,P),o(this,D),r,d,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,d,{toolCall:t});return}else if(typeof p>"u"){this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"function_approval",tool:r,approvalItem:new we(t,o(this,D))});return}}this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t}),o(this,P).context.history=JSON.parse(JSON.stringify(o(this,X)));const i=await r.invoke(o(this,P),t.arguments,{toolCall:t});let u;Ua(i)?(u=Je(i.content),o(this,$).sendFunctionCallOutput(t,u,!1)):(u=Je(i),o(this,$).sendFunctionCallOutput(t,u,!0)),this.emit("agent_tool_end",o(this,P),o(this,D),r,u,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,u,{toolCall:t})},Qa=async function(t){const r=new Map(o(this,D).handoffs.map(Gn).map(u=>[u.toolName,u])),s=await o(this,D).getAllTools(o(this,P)),a=new Map(s.map(u=>[u.name,u])),i=r.get(t.name);if(i)await L(this,Y,Xa).call(this,t,i);else{const u=a.get(t.name);if(u&&u.type==="function")await L(this,Y,sr).call(this,t,u);else throw new he(`Tool ${t.name} not found`)}},Hr=async function(t,r,s){if(o(this,Ft).length===0)return;const a={agent:o(this,D),agentOutput:t,context:o(this,P)},u=(await Promise.all(o(this,Ft).map(p=>p.run(a)))).find(p=>p.output.tripwireTriggered);if(u){if(o(this,Ut)[r])return;o(this,Ut)[r]=!0;const p=new $n(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`,u);this.emit("guardrail_tripped",o(this,P),o(this,D),p,{itemId:s}),this.interrupt();const d=nc(u);this.sendMessage(d);return}},ei=function(){o(this,$).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;y(this,X,Oa(o(this,X),a,o(this,Zt))),o(this,P).context.history=o(this,X),this.emit("history_updated",o(this,X))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("mcp_tools_listed",({serverLabel:s,tools:a})=>{try{o(this,wn).set(s,a??[]),L(this,Y,Kr).call(this)}catch(i){this.emit("error",{type:"error",error:i})}}),o(this,$).on("audio",s=>{o(this,Re)||(y(this,Re,!0),this.emit("audio_start",o(this,P),o(this,D))),this.emit("audio",s)}),o(this,$).on("turn_started",()=>{y(this,Re,!1),this.emit("agent_start",o(this,P),o(this,D)),o(this,D).emit("agent_start",o(this,P),o(this,D))}),o(this,$).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Ca(a)??"",u=(a==null?void 0:a.id)??"";this.emit("agent_end",o(this,P),o(this,D),i),o(this,D).emit("agent_end",o(this,P),i),L(this,Y,Hr).call(this,i,s.response.id,u)}),o(this,$).on("audio_done",()=>{o(this,Re)&&y(this,Re,!1),this.emit("audio_stopped",o(this,P),o(this,D))});let t=0,r;o(this,$).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,u=s.responseId;r!==i&&(r=i,t=0);const d=(o(this,vn)[i]??"")+a;if(o(this,vn)[i]=d,o(this,Lt).debounceTextLength<0)return;const l=Math.floor(d.length/o(this,Lt).debounceTextLength);l>t&&(t=l,L(this,Y,Hr).call(this,d,u,i))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("item_update",s=>{try{const a=!o(this,X).some(i=>i.itemId===s.itemId);if(y(this,X,Oa(o(this,X),s,o(this,Zt))),o(this,P).context.history=o(this,X),a){const i=o(this,X).find(u=>u.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",o(this,X))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("item_deleted",s=>{try{y(this,X,o(this,X).filter(a=>a.itemId!==s.itemId)),o(this,P).context.history=o(this,X),this.emit("history_updated",o(this,X))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("function_call",async s=>{try{await L(this,Y,Qa).call(this,s)}catch(a){xe.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),o(this,$).on("usage_update",s=>{o(this,P).usage.add(s)}),o(this,$).on("audio_interrupted",()=>{o(this,Re)&&y(this,Re,!1),this.emit("audio_interrupted",o(this,P),o(this,D))}),o(this,$).on("error",s=>{this.emit("error",s)}),o(this,$).on("mcp_tool_call_completed",s=>{this.emit("mcp_tool_call_completed",o(this,P),o(this,D),s),o(this,xn)&&o(this,$).sendEvent({type:"response.create"})}),o(this,$).on("mcp_approval_request",s=>{this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"mcp_approval_request",approvalItem:Xu(o(this,D),s)})})},Kr=function(){var p;const t=(p=o(this,$t))==null?void 0:p.filter(d=>d.type==="mcp"),r=d=>{const l=d.allowed_tools;if(l){if(Array.isArray(l))return l;if(l&&Array.isArray(l.tool_names))return l.tool_names}},s=new Map;for(const d of t){const l=o(this,wn).get(d.server_label)??[],f=r(d);for(const h of l)f&&!f.includes(h.name)||s.has(h.name)||s.set(h.name,h)}const a=Array.from(s.values()),i=o(this,wt);(i.length!==a.length||JSON.stringify(i.map(d=>d.name).sort())!==JSON.stringify(a.map(d=>d.name).sort()))&&(y(this,wt,a),this.emit("mcp_tools_changed",o(this,wt)))};const dd={base64ToArrayBuffer:ka,arrayBufferToBase64:Aa,getLastTextFromAudioOutputMessage:Ca};M.DEFAULT_OPENAI_REALTIME_MODEL=$a,M.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=Oe,M.ModelBehaviorError=he,M.OpenAIRealtimeBase=tn,M.OpenAIRealtimeWebRTC=Fa,M.OpenAIRealtimeWebSocket=La,M.OutputGuardrailTripwireTriggered=$n,M.RealtimeAgent=Qu,M.RealtimeSession=cd,M.UserError=ne,M.backgroundResult=id,M.isBackgroundResult=Ua,M.tool=Zn,M.utils=dd,Object.defineProperty(M,Symbol.toStringTag,{value:"Module"})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
